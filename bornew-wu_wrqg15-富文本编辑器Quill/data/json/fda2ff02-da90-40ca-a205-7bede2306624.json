{
  "body_html": "<!doctype html><a name=\"关于写此文的目的：\"></a><h4 id=\"8d5ed3ea\">关于写此文的目的：</h4><p><br /></p><p>第一次接触富文本编辑器，尤其是 react-quill 这种，百度不到的各种坑，踩了无数的坑终于搞明白了。</p><p><br /></p><a name=\"1.-安装\"></a><h4 id=\"7758e477\">1. 安装</h4><p><br /></p><p><code>npm i react-quill --save</code> 需要用到 emjo 的话还需要<code>npm i quillEmoji --save</code> 安装完之后页面引进</p><p><br /></p><pre data-lang=\"bash\"><code>import ReactQuill, { Quill } from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport quillEmoji from 'quill-emoji';\nimport &quot;quill-emoji/dist/quill-emoji.css&quot;; //这个不引入的话会出现emoji框一直在输入框下面的情况\nimport { ImageDrop } from './plugin/quill-image-drop-module'; //讲图片拖进文本框，可以直接安装quill-image-drop-module；但由于我的webpack版本过低，无法兼容es6，所以把插件拿出来了\n//注册ToolbarEmoji，将在工具栏出现emoji；注册TextAreaEmoji，将在文本输入框处出现emoji。VideoBlot是我自定义的视频组件，后面会讲，\nconst { EmojiBlot, ShortNameEmoji, ToolbarEmoji, TextAreaEmoji } = quillEmoji;\nQuill.register({\n  'formats/emoji': EmojiBlot,\n  'formats/video': VideoBlot,\n  'modules/emoji-shortname': ShortNameEmoji,\n  'modules/emoji-toolbar': ToolbarEmoji,\n  'modules/emoji-textarea': TextAreaEmoji,\n  // 'modules/ImageExtend': ImageExtend, //拖拽图片扩展组件\n  'modules/ImageDrop': ImageDrop, //复制粘贴组件\n}, true);</code></pre><p><br /></p><p>next。</p><p><br /></p><a name=\"初始化富文本实例，我写在-constructor-里，module-也是写在这里边\"></a><h4 id=\"d16dc3ee\">初始化富文本实例，我写在 constructor 里，module 也是写在这里边</h4><p><br /></p><p><code>constructor(props) { super(props); this.reactQuillRef = null; }</code></p><p><br /></p><a name=\"富文本组件-react-quill-参数\"></a><h4 id=\"d91461bd\">富文本组件 react-quill 参数</h4><p><br /></p><pre data-lang=\"bash\"><code>&lt;ReactQuill\n      ref={(el) =&gt; { this.reactQuillRef = el }}\n      defaultValue={postRichText}\n       key=&quot;1&quot;\n       id=&quot;textDiv1&quot; theme=&quot;snow&quot; modules={this.modules}  /&gt;</code></pre><p><br /></p><p>工具栏 modules 的定义基本属性如下：</p><p><br /></p><pre data-lang=\"bash\"><code> this.modules = {\n      toolbar: {\n        container: [\n          [{ 'size': ['small', false, 'large', 'huge'] }], //字体设置\n          // [{ 'header': [1, 2, 3, 4, 5, 6, false] }], //标题字号，不能设置单个字大小\n          ['bold', 'italic', 'underline', 'strike'],  \n          [{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'indent': '-1' }, { 'indent': '+1' }],\n          ['link', 'image'], // a链接和图片的显示\n          [{ 'align': [] }],\n          [{\n            'background': ['rgb(  0,   0,   0)', 'rgb(230,   0,   0)', 'rgb(255, 153,   0)',\n              'rgb(255, 255,   0)', 'rgb(  0, 138,   0)', 'rgb(  0, 102, 204)',\n              'rgb(153,  51, 255)', 'rgb(255, 255, 255)', 'rgb(250, 204, 204)',\n              'rgb(255, 235, 204)', 'rgb(255, 255, 204)', 'rgb(204, 232, 204)',\n              'rgb(204, 224, 245)', 'rgb(235, 214, 255)', 'rgb(187, 187, 187)',\n              'rgb(240, 102, 102)', 'rgb(255, 194, 102)', 'rgb(255, 255, 102)',\n              'rgb(102, 185, 102)', 'rgb(102, 163, 224)', 'rgb(194, 133, 255)',\n              'rgb(136, 136, 136)', 'rgb(161,   0,   0)', 'rgb(178, 107,   0)',\n              'rgb(178, 178,   0)', 'rgb(  0,  97,   0)', 'rgb(  0,  71, 178)',\n              'rgb(107,  36, 178)', 'rgb( 68,  68,  68)', 'rgb( 92,   0,   0)',\n              'rgb(102,  61,   0)', 'rgb(102, 102,   0)', 'rgb(  0,  55,   0)',\n              'rgb(  0,  41, 102)', 'rgb( 61,  20,  10)']\n          }],\n          [{\n            'color': ['rgb(  0,   0,   0)', 'rgb(230,   0,   0)', 'rgb(255, 153,   0)',\n              'rgb(255, 255,   0)', 'rgb(  0, 138,   0)', 'rgb(  0, 102, 204)',\n              'rgb(153,  51, 255)', 'rgb(255, 255, 255)', 'rgb(250, 204, 204)',\n              'rgb(255, 235, 204)', 'rgb(255, 255, 204)', 'rgb(204, 232, 204)',\n              'rgb(204, 224, 245)', 'rgb(235, 214, 255)', 'rgb(187, 187, 187)',\n              'rgb(240, 102, 102)', 'rgb(255, 194, 102)', 'rgb(255, 255, 102)',\n              'rgb(102, 185, 102)', 'rgb(102, 163, 224)', 'rgb(194, 133, 255)',\n              'rgb(136, 136, 136)', 'rgb(161,   0,   0)', 'rgb(178, 107,   0)',\n              'rgb(178, 178,   0)', 'rgb(  0,  97,   0)', 'rgb(  0,  71, 178)',\n              'rgb(107,  36, 178)', 'rgb( 68,  68,  68)', 'rgb( 92,   0,   0)',\n              'rgb(102,  61,   0)', 'rgb(102, 102,   0)', 'rgb(  0,  55,   0)',\n              'rgb(  0,  41, 102)', 'rgb( 61,  20,  10)']\n          }],\n          ['clean'], //清空\n          ['emoji'], //emoji表情，设置了才能显示\n          ['video2'], //我自定义的视频图标，和插件提供的不一样，所以设置为video2\n        ],\n        handlers: {\n          'image': this.imageHandler.bind(this), //点击图片标志会调用的方法\n          'video2': this.showVideoModal.bind(this),\n        },\n      },\n      // ImageExtend: {\n      //   loading: true,\n      //   name: 'img',\n      //   action: RES_URL + &quot;connector?isRelativePath=true&quot;,\n      //   response: res =&gt; FILE_URL + res.info.url\n      // },\n      ImageDrop: true,\n      'emoji-toolbar': true,  //是否展示出来\n      &quot;emoji-textarea&quot;: false, //我不需要emoji展示在文本框所以设置为false\n      &quot;emoji-shortname&quot;: true, \n    }</code></pre><p><br /></p><p>想要的最终效果如下图：</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2020/5/23/1723d5ef7f1080c6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>到这一步，界面是能正常显示了，但功能不完善，next</p><p><br /></p><a name=\"3.-功能的开发\"></a><h4 id=\"fd6825db\">3. 功能的开发</h4><p><br /></p><p>1. 上传本地图片到服务器，代码如下：</p><p><br /></p><pre data-lang=\"bash\"><code>//这是点击图片图标触发的事件\nimageHandler() {\n    const input = document.createElement('input')\n    input.setAttribute('type', 'file')\n    input.setAttribute('accept', 'image/*')\n    input.setAttribute('multiple', 'multiple')\n    input.click()\n    const that = this;\n    input.onchange = async () =&gt; {\n      Array.from(input.files).forEach(item =&gt; {\n      //业务需求安装了压缩图片的插件，可忽略\n        new Compressor(item, {\n          quality: 0.8,\n          convertSize: 1024 * 1024 * 8,\n          success(result) {\n          //很很很很重要的一步\n            const formData = new FormData();\n            formData.append('file', result, result.name);\n            Axios({\n              method: 'post',\n              data: formData,\n              url: config.RES_URL + 'connector?isRelativePath=true'，//图片上传的接口\n            }).then(res =&gt; {\n              if (res.data.success) {\n                let quill = that.reactQuillRef.getEditor();//获取到编辑器本身\n                const cursorPosition = quill.getSelection().index;//获取当前光标位置\n                const link = config.RES_URL + res.data.info.url;\n                quill.insertEmbed(cursorPosition, &quot;image&quot;, link);//插入图片\n                quill.setSelection(cursorPosition + 1);//光标位置加1\n              }\n            })\n          },\n        });\n      })\n    }\n  }</code></pre><p><br /></p><p>到这里已经能实现本地图片上传到服务器的需求了 2. 视频自定义</p><p><br /></p><pre data-lang=\"bash\"><code> //上传视频处理\n  addVideoItem = (img, url) =&gt; {\n    let quill = this.reactQuillRef.getEditor();//获取到编辑器本身\n    let cursorPosition = quill.selection.savedRange.index\n    quill.insertEmbed(cursorPosition, 'Video', {\n      url,\n      controls: 'controls',\n      poster: img,\n      width: '100%',\n      controlslist: 'nodownload noremoteplayback',\n      oncontextmenu: 'return false'\n    })\n    // 光标不加1的话视频删不掉\n    quill.setSelection(cursorPosition + 1);//光标位置加1\n    this.setState({\n      upVideoShow: false\n    })\n  }</code></pre><p><br /></p><p>这段代码功能实现的前提是，我刚开始引入的自定义视频组件，创建视频标签，代码如下：</p><p><br /></p><pre data-lang=\"bash\"><code>\nconst Quill = require('quill');\n\nconst BlockEmbed = Quill.import('blots/block/embed')\nexport class VideoBlot extends BlockEmbed {\n  static create(value) {\n    let node = super.create()\n    node.setAttribute('src', value.url)\n    node.setAttribute('controls', value.controls)\n    node.setAttribute('width', value.width)\n    node.setAttribute('poster', value.poster)\n    node.setAttribute('controlslist', 'nodownload noremoteplayback')\n    node.setAttribute('oncontextmenu', 'return false')\n    return node;\n  }\n  // 富文本初始化取参数，如果有编辑富文本的功能的话，这段代码就需要加上\n  static value(node) {\n    return {\n      url: node.getAttribute('src'),\n      controls: node.getAttribute('controls'),\n      width: node.getAttribute('width'),\n      poster: node.getAttribute('poster'),\n      controlslist: node.getAttribute('controlslist'),\n      oncontextmenu: node.getAttribute('oncontextmenu')\n    };\n  }\n}\nVideoBlot.blotName = 'Video';\nVideoBlot.tagName = 'video';\nVideoBlot.className = 'ql-video';</code></pre><p><br /></p><p>完结 踩坑无数搞了两个星期才弄的明明白白，隔了一个月再来写当初怎么艰难开始的也都忘了，写不出来什么了。如有遇到什么问题欢迎留言<br />\n<a href=\"https://juejin.cn/post/6844904166284869640\" target=\"_blank\">https://juejin.cn/post/6844904166284869640</a></p>",
  "slug": 30256562,
  "title": "react-quill 插入自定义视频组件 - 掘金"
}