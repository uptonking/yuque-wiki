{
  "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-classic show-placeholder\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5B0%2C1%5D%2C%5B0%2C1%5D%5D%2C%22active%22%3Atrue%7D\"><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">之前就想总结，拖拖拖，拖到今天写深拷贝时才整理</p></blockquote><h3 data-lake-id=\"66d68ddab23fd2e66472394ed7fa1d7e\" id=\"IzCX4\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">JS内存模型</h3><p data-lake-id=\"16b4a34e0bfce91f443c2b881550c205\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JS引擎将内存空间分为两块：<strong>堆（heap）与栈（stack）</strong></p><ul data-lake-id=\"54403c2bd7f76848b359ad81ce831de5\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"ccb02b2e63ef5c35abde5e667bfa3703\"><strong>JS中的原始数据类型值通常都存储在栈中</strong><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">（</code><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Number String Null Undefined Boolean Symbol）</code></li><li data-lake-id=\"df6e853ad35beea9a9b8fdde7e60976d\"><strong>而引用类型的数据都被存储在堆中</strong><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">（Object）</code></li></ul><p data-lake-id=\"076d7b0903ed2f2b9d8fa5e0052b4dc7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当使用<strong><span>原始数据值运算时，我们就是在操纵栈中的数据；</span>但JS不允许直接访问堆空间，</strong><span style=\"background-color: #FFE8E6;\"><strong>我们只能在栈中保存指向堆中数据的引用/指针/地址，在操作对象时，实际上是在操作对象的引用而不是实际的对象</strong></span></p><p data-lake-id=\"79be3e65a2d19ef327729567508cb5c0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">例子：<span>这段代码中不同变量实际的内存空间如下图所示</span></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"KmExL\" class=\"lake-card-margin\" data-language=\"javascript\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">var</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a1</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>;   <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 栈 </span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">var</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a2</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'this is string'</span>; <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 栈</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">var</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a3</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">null</span>; <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 栈</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">var</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">b</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> { <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">m</span>: <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">20</span> }; <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 变量b存在于栈中，{m: 20} 作为对象存在于堆内存中</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">var</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">c</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> [<span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>, <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">2</span>, <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">3</span>]; <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 变量c存在于栈中，[1, 2, 3] 作为对象存在于堆内存中</span></span></span></pre></div></div></div><p data-lake-id=\"bca802de8b408b70c9546459d1254b1e\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2020/webp/670787/1605667235921-3e26521f-1c95-4b4d-98c8-4ff2a52e91df.webp\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image\" title=\"image\" data-height=\"265px\" style=\"visibility: visible; width: 475px;\"></span></p><h4 data-lake-id=\"c87384b718917c7aa4b35d02bde5287b\" id=\"eR0CN\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\">函数执行中的内存管理</h4><p data-lake-id=\"44234218bef04ee5fefa746f7cb11569\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">一个函数执行前后的内存管理的过程是什么样的？[强烈建议配合<span data-card-type=\"inline\" data-lake-card=\"yuqueinline\"><span>此处为语雀文档，点击链接查看：</span><a href=\"https://www.yuque.com/gesidalijiashidai/fgeemd/gi0181\" style=\"\n    word-wrap: break-word;\n    color: #096DD9;\n    touch-action: manipulation;\n    background-color: rgba(0,0,0,0);\n    text-decoration: none;\n    outline: none;\n    cursor: pointer;\n    transition: color .3s;\n  \">https://www.yuque.com/gesidalijiashidai/fgeemd/gi0181</a></span><span>中函数编译执行过程观看</span>]</p><div data-card-type=\"block\" data-lake-card=\"table\" id=\"LYECr\" class=\"lake-card-margin\"><table class=\"lake-table lake-no-border\" style=\"width: 749px; outline: none; border-collapse: collapse; border: 1px solid transparent;\"><colgroup><col width=\"749\" span=\"1\"></colgroup><tbody><tr style=\"height: 33px;\"><td rowspan=\"1\" colspan=\"1\" style=\"background-color: rgb(255, 236, 224); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid transparent; padding: 4px 8px; cursor: default;\"><ul data-lake-id=\"8278723f5422f6fd9c5c31c5db58cce8\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"53723a9dce985d71ad286adec79e932c\">首先函数本身作为对象，在被声明后就创建在了堆上</li><li data-lake-id=\"591a21e2fa51e202d28a62a2fc0c5120\">当函数被调用，引擎会在执行栈上创建函数的上下文</li></ul><ul data-lake-id=\"b33bbd5839e7164a93f239baced3f6b9\" lake-indent=\"1\" style=\"list-style-type: none; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><ul data-lake-id=\"4693c7c87a793fb6c65d5528f9d01329\" lake-indent=\"0\" style=\"list-style-type: circle; margin: 0px; padding-left: 23px;\"><li data-lake-id=\"7797ea0d13f468d8335c8f647a190823\">函数中的基本类型数据会直接被存放在栈空间上</li><li data-lake-id=\"16c135f12b52507dec3e29e613a8da18\">函数中的引用类型数据会存放在堆空间上，但为了使用堆上的数据，函数上下文会在栈中保存一个指向堆上数据的引用，实际上该过程刚才已经存在——全局上下文在栈上保存了一个指向函数的引用，函数对象本身存在堆上等待调用</li></ul></ul><ul data-lake-id=\"6cce78a3f84362c194bb59673961d5d1\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"5ac496546daa44921f2ad64494cd1c5c\">函数执行结束，则它的上下文出栈，栈空间被回收，如果堆中对象不再被使用，则堆空间会被垃圾回收程序重新回收</li></ul></td></tr></tbody></table></div><h4 data-lake-id=\"dec4f729bc31b1d45d91d501481188f1\" id=\"xwyfs\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\">C语言内存管理</h4><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"6a0ba200522110f3ff3ca1e69ad5f44d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">为什么这里要提C语言，因为v8引擎基于C++，而引擎负责JS代码执行过程中的内存管理，换句话说JS的内存管理实际上就是C++内存管理的封装，了解C中的内存机制可以让你理解为什么会有heap与stack这样的数据结构</p></blockquote><p data-lake-id=\"26cf204fab7409a4e62d50ac21a4125e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">有兴趣和基础的同学可以去看我在系统级编程中做的关于<strong>内存布局和分配</strong>的笔记（<span data-card-type=\"inline\" data-lake-card=\"yuqueinline\"><span>此处为语雀文档，点击链接查看：</span><a href=\"https://www.yuque.com/gesidalijiashidai/ntyr7v/opu9y5\" style=\"\n    word-wrap: break-word;\n    color: #096DD9;\n    touch-action: manipulation;\n    background-color: rgba(0,0,0,0);\n    text-decoration: none;\n    outline: none;\n    cursor: pointer;\n    transition: color .3s;\n  \">https://www.yuque.com/gesidalijiashidai/ntyr7v/opu9y5</a></span>）</p><div data-card-type=\"block\" data-lake-card=\"yuque\" id=\"gZB2H\" class=\"lake-card-margin\"><span>此处为语雀文档，点击链接查看：</span><a href=\"https://www.yuque.com/gesidalijiashidai/ntyr7v/opu9y5?inner=46g8t\" style=\"\n    word-wrap: break-word;\n    color: #096DD9;\n    touch-action: manipulation;\n    background-color: rgba(0,0,0,0);\n    text-decoration: none;\n    outline: none;\n    cursor: pointer;\n    transition: color .3s;\n  \">https://www.yuque.com/gesidalijiashidai/ntyr7v/opu9y5?inner=46g8t</a></div><p data-lake-id=\"cf0d94ebb85c578b7965ce69ceb8b0df\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">stack与heap的出现主要是适应了不同的数据存储需求</p><ul data-lake-id=\"2ea334c71af4754408ea48661043f363\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"9a953de3e3054a7a4b5191ae8ad91ff1\">stack适合静态分配（也可动态）：在处理程序源代码时分配内存空间，在程序执行之前进行，效率比较高，但因为需要提前分配，对于数据的大小需要预知，因此适合有明确类型的数据，如int、double、指针等</li><li data-lake-id=\"9d5a26262901f581825f970cba42d264\">heap只能动态分配：<span class=\"lake-fontsize-11\" style=\"color: rgb(38, 38, 38); font-size: 14px;\" data-mce-style=\"font-size: 11px\">程序在执行过程中再进行内存分配，有更大的地址空间可分配，同时更灵活，但是分配效率会降低</span></li></ul><p data-lake-id=\"ab6e9f441c232b5e8aef130fec9b5b2b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>以上的描述针对C程序，但是JS内存管理大致基于此封装，只不过静态动态分配的过程都被JS引擎负责了，归根结底，stack与heap的划分是为了适应不同的数据存取需求</strong></p></div>",
  "slug": 16130400,
  "title": "JS内存管理"
}