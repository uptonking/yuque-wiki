{
  "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-classic\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5B5%2C0%2C0%5D%2C%5B5%2C0%2C0%5D%5D%2C%22active%22%3Atrue%7D\"><h3 data-lake-id=\"c658b87e81a5dfaa829d252e96de3106\" id=\"U4g91\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">Node 事件循环</h3><p data-lake-id=\"3f927ad5c213d4f248791357b1988e02\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Node.js采用 V8 作为 js 的解析引擎，而 I/O 处理方面使用 libuv，后者是一个基于事件驱动的跨平台抽象层，封装了不同操作系统一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现。</p><p data-lake-id=\"44ca319dcd48ea0031d885bab4ce82b4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">根据Node.js官方介绍，每次事件循环（tick）都包含了6个阶段，对应到 libuv 源码中的实现，如下图所示：</p><p data-lake-id=\"7a901f1865f04310cd5e5e49ae3f6fe9\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/670787/1609920457416-3830601f-a1b4-4af2-8fd1-a9f9f373d8c0.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image\" title=\"image\" data-height=\"241px\" style=\"visibility: visible; width: 534px;\"></span></p><p data-lake-id=\"8359f4dce7be6deeb53945bb677c4eb2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Node 环境下，每一个阶段有一个队列，event loop 执行到该阶段时，会执行该阶段的队列里的所有 callback，当队列 callback 为空或 callback 执行到上限的时，跳至下一阶段进行执行</p><p data-lake-id=\"9745167dbd45c7b94ae3ca59bd2c1ff3\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/670787/1609920693978-8120ad3f-1620-4737-b15a-f9e973efe97d.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image\" title=\"image\" data-height=\"383px\" style=\"visibility: visible; width: 499px;\"></span></p><ul data-lake-id=\"f74c86f2ded4ef2a41c206857dd7b696\" start=\"1\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"21668dc372ee3716abc20dd5d63aabb2\"><strong>timers 阶段：</strong>执行 setTimeout(callback) 和 setInterval(callback) 预定的 callback</li><li data-lake-id=\"b7d5a59995bb13cb115216d8247de856\"><strong>I/O callbacks 阶段: </strong>执行除了 close 事件、timers(setTimeout、setInterval等)、setImmediate()设定的回调之外的 callbacks</li><li data-lake-id=\"dd59c738c6ae2273d24274d765918c62\"><strong>idle，prepare 阶段</strong>：仅node内部使用</li><li data-lake-id=\"75f1b3e8dec0471ff8d31949a402bfe6\"><strong>poll 阶段：</strong>获取新的 I/O 事件，因此某些条件下 node 将阻塞在这里；poll 还负责检测是否有 timer 的 callback 就绪却未执行，如果发现，那么就循环至开头执行 timer 的 callback。</li><li data-lake-id=\"78077b534508d79619e66d121eea828f\"><strong>check 阶段: </strong>执行 setImmediate() 设定的 callbacks</li><li data-lake-id=\"133d0832857d992e2f45f20eb3cc6acd\"><strong>close callbacks 阶段: </strong>比如 socket.on('close', callback) 等 close 事件的回调会在这个阶段执行</li></ul><p data-lake-id=\"5b8da2685462006c4472ea63c5a2773e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"ec4f5a8ff4856369da24dbc7162a1340\" style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></div>",
  "slug": 29700975,
  "title": "Node.js 知识点"
}