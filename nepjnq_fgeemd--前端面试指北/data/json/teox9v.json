{
  "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-classic\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5B35%2C1%2C1%2C0%2C31%5D%2C%5B35%2C1%2C1%2C0%2C31%5D%5D%2C%22active%22%3Atrue%7D\"><h3 data-lake-id=\"9c2b60df88aa7f5630f7230782579908\" id=\"heLo5\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>原理描述</span></h3><p data-lake-id=\"9a8d2f6ee66c10393b97fefe45f3df41\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/webp/670787/1609479549603-cd7e29e5-44e5-42b9-bdac-90dcac08b62e.webp\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image\" title=\"image\" data-height=\"381px\" style=\"visibility: visible; width: 609px;\"></span></p><p data-lake-id=\"a6efdba8385c274b679c4f7fb0017c73\" style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Vue 的响应式是通过 Object.defineProperty 对数据进行劫持，并结合观察者模式实现：</p><ul data-lake-id=\"e24fe3db471a9c383e18e9ccf5c0e675\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"a78017601bffaea78692d19e3f5ecfeb\">Vue 为每个对象创建一个 observer，之后利用 Object.defineProperty 劫持监听对象所有属性，把这些属性全部转为 getter 和 setter</li><li data-lake-id=\"14190178acaf128c26224ff148950ab2\">Vue 中每个组件实例都会对应一个 watcher 实例：<strong>在组件渲染的过程中，watcher 会通过 getter 订阅到当前属性上，即该属性成为组件的一项依赖，首次渲染后，组件会跟踪一组依赖列表。之后当属性的 setter 触发时，observer 会通知订阅该属性的 watcher，从而使它关联的组件重新渲染</strong></li></ul><div data-card-type=\"block\" data-lake-card=\"hr\"><hr style=\"background-color: rgb(232, 232, 232); border: 1px solid transparent; margin: 18px 0px;\"></div><h3 data-lake-id=\"072c87535232770906e21a83abffd03e\" id=\"Rs4En\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">源码分析</h3><p data-lake-id=\"54aa1824fcec743a2aba0467972ed07e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Vue2.6 版本初始化响应数据的过程大致如下</p><div data-card-type=\"block\" data-lake-card=\"flowchart2\" id=\"ph4zV\" class=\"lake-card-margin\"><img src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/670787/1610723548896-06a90b6e-2464-4b81-b5b9-c3d2f8f3f04e.jpeg\" height=\"316.979/\"></div><p data-lake-id=\"ad696f1e28cdb96fd2bc23c3f8c37e20\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul data-lake-id=\"5af2c46d0634d1864a9448e65b080d03\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"420eb212614e2fe4767b72a90f51a75a\">new Vue()：调用构造函数，当中会调用 initMixin()，依次执行一系列 init 方法</li><li data-lake-id=\"3751d5a671e4f08d12aea037e4b6c0e5\">initState()：开始初始化 watchers[] 数组，调用 initProps()、<span>initMethods()、</span><span>initData() </span></li></ul><p data-lake-id=\"a5a6d560abdea3df779c80fbde05d598\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/670787/1609468649629-b7a1a986-472a-4af4-a979-4ebbb702a92d.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"245px\" style=\"visibility: visible; width: 429px;\"></span></p><p data-lake-id=\"1bdea0c79524807acc97f67590fdd533\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span class=\"lake-fontsize-9\" data-mce-style=\"font-size: 9px\" style=\"font-size: 12px;\">initState()</span></strong></p><ul data-lake-id=\"2050fe03b51d3b36950047e335bb35f0\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"d162872efaec2e631071f7e23de94197\">initData()：对 data 进行初步处理后传入 observe() 进行观测</li></ul><p data-lake-id=\"2ffc2be0e024fc40754559d83fcc184b\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/670787/1609472519176-1fde807d-b1ae-465f-9988-d0026a27135f.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"308px\" style=\"visibility: visible; width: 417px;\"></span></p><p data-lake-id=\"f6d92209a2fa2bca93581b6be268dc8c\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span class=\"lake-fontsize-9\" data-mce-style=\"font-size: 9px\" style=\"font-size: 12px;\">initDate()</span></strong></p><ul data-lake-id=\"e3ebf38761dd05a4b2c0a203918fd21e\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"2908cbc775fdbf06f5bc50f0ce907ac2\"><span>observe()：为传入 value 创建 observer ，成功观测则返回观测者实例，或返回当前 value 已有的 </span><span>observer</span></li></ul><p data-lake-id=\"a37fa79fe0ee079870bbd62e95ac2892\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/670787/1609472562519-4185ceb3-d0bb-4e09-bd2c-d23b7a16ab8d.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"342px\" style=\"visibility: visible; width: 421px;\"></span></p><p data-lake-id=\"4aa35a755c29dc91f743fd5af6a88869\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span class=\"lake-fontsize-9\" data-mce-style=\"font-size: 9px\" style=\"font-size: 12px;\">observe()</span></strong></p><ul data-lake-id=\"1d759e419843846dc7b2189a08bf3180\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"035722d354fa3a706bedf9ef6cf0e7ca\"><span>Observer() 构造器：observer 会被附加到被观测对象上，之后 </span><span>observer 会将对象的 property keys 转换为 getter/setters ，</span><span> getter 会在渲染过程中收集当前 property 的依赖项，setter 则会分发更新</span></li></ul><ul data-lake-id=\"da4f66a44b667db432f0cd10fd86b802\" lake-indent=\"1\" style=\"list-style-type: none; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><ul data-lake-id=\"eb4eee52a1b7aa7fae6ba3a4de6ba0bd\" lake-indent=\"0\" style=\"list-style-type: circle; margin: 0px; padding-left: 23px;\"><li data-lake-id=\"84efd50d876df4430881c24d957ae407\"><span>每一个 observer 实例也拥有自己的 dep 实例，负责依赖收集</span></li><li data-lake-id=\"904abf72da5ffd231206a689754e9f28\"><span>def() 将 observer 实例添加为被观测数据对象上的属性 __ob__ </span></li><li data-lake-id=\"31c67e2bfb9266eb7a631f0b13092bfc\"><span>创建 observer 后，执行 walk()</span></li></ul></ul><p data-lake-id=\"46487e85ab2753ff67b0aa1ea4fb9518\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/670787/1609469549084-49787043-d214-4e3e-9b5e-41483c29da34.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"275px\" style=\"visibility: visible; width: 414px;\"></span></p><p data-lake-id=\"6cba2fdd8d1020dea09b3800b1754eb1\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span class=\"lake-fontsize-9\" data-mce-style=\"font-size: 9px\" style=\"font-size: 12px;\">Observer()</span></strong></p><ul data-lake-id=\"0c6fbeddcae588905548254055d7de27\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"ac744a19c1b30a66e658e66f466e050d\"><span>walk()：遍历 properties，对每一个property 执行 defineReactive()</span></li></ul><p data-lake-id=\"d4ce74964a2761f04828b12e63b204ac\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/670787/1609470033513-44b7c975-9bc7-4791-aa54-6e7df997018a.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"110px\" style=\"visibility: visible; width: 408px;\"></span></p><p data-lake-id=\"6897eb7f6f5498a001c4e4d90c7becbf\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span class=\"lake-fontsize-9\" data-mce-style=\"font-size: 9px\" style=\"font-size: 12px;\">Observer.prototype.walk()</span></strong></p><ul data-lake-id=\"097ebeb53a3c999a556e540a685841d7\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"42ded3cf240dddf4ef90ed12498fd1f7\"><span> defineReactive()：真正进行转换的地方，首先会调用 observe，递归地对当前 property 中的子对象添加观测，即重复 Observer() =&gt; walk() =&gt; </span><span>defineReactive()。之后通过 defineProperty() 添加 getter 和 setter</span></li></ul><ul data-lake-id=\"1b5855b4059cf1c1bb6b647eb2f7598e\" lake-indent=\"1\" style=\"list-style-type: none; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><ul data-lake-id=\"3b7ee8ca824165cb9b99a1fa0cb65df6\" lake-indent=\"0\" style=\"list-style-type: circle; margin: 0px; padding-left: 23px;\"><li data-lake-id=\"464903c35c5ca2762e1da9d0386c280b\"><span>target：根据注释，target 即当前执行时的 watcher</span></li></ul></ul><p data-lake-id=\"232baa7af05cba34d87f5eadb9e8b0b1\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/670787/1609471744771-04046b80-2857-40cf-9958-58218530c74d.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"94px\" style=\"visibility: visible; width: 419px;\"></span></p><p data-lake-id=\"f334710bd5cc603ecca3623cc74d1172\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span class=\"lake-fontsize-9\" data-mce-style=\"font-size: 9px\" style=\"font-size: 12px;\"><span>Dep.target</span></span></strong></p><ul data-lake-id=\"a86f9612307643bc193b246483588fd6\" lake-indent=\"1\" style=\"list-style-type: none; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><ul data-lake-id=\"dce6ea510d0597aae0a65ca06f16d219\" lake-indent=\"0\" style=\"list-style-type: circle; margin: 0px; padding-left: 23px;\"><li data-lake-id=\"1a495e47180bdfe7608ae248efeaea2d\"><span>getter：在 getter 中可以看到调用了 depend() ，查看 depend() 声明，该函数调用 target.addDep()，即渲染实例时调用 getter() 就会添加 dep 实例到 </span><span>watcher</span></li><li data-lake-id=\"6e780ff75eafd4cb3c6fbc3590f42c18\"><span>setter：在 setter 中调用 notify()，修改值的同时该更新会通知</span> <span>watcher，其中关联的组件会进行更新</span></li></ul></ul><p data-lake-id=\"562007e74aac869198df4032b92e410b\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/670787/1609470809179-f87b4230-e971-4bff-a5eb-a4386048be90.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"298px\" style=\"visibility: visible; width: 746px;\"></span></p><p data-lake-id=\"e6662325b6126b97ed0f8457aca06936\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span class=\"lake-fontsize-9\" data-mce-style=\"font-size: 9px\" style=\"font-size: 12px;\"><span>defineReactive()</span></span><span class=\"lake-fontsize-9\" data-mce-style=\"font-size: 9px\" style=\"font-size: 12px;\"><span><br></span></span></strong><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/670787/1609471404165-9d40c6b8-4a0b-48af-a762-43a59de9f511.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"279px\" style=\"visibility: visible; width: 372px;\"></span><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/670787/1609479304568-45b68d80-4038-458e-af5a-5ad56255ab78.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"201px\" style=\"visibility: visible; width: 361px;\"></span></p><p data-lake-id=\"f415d61f4427f5001cf77f16093da471\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span class=\"lake-fontsize-9\" data-mce-style=\"font-size: 9px\" style=\"font-size: 12px;\">Dep.prototype.depend()/notify()                                                                    Watcher.prototype.addDep()</span></strong></p><div data-card-type=\"block\" data-lake-card=\"table\" id=\"MG1t3\" class=\"lake-card-margin\"><table class=\"lake-table lake-no-border\" style=\"width: 751px; outline: none; border-collapse: collapse; border: 1px solid transparent;\"><colgroup><col width=\"751\" span=\"1\"></colgroup><tbody><tr style=\"height: 33px;\"><td style=\"background-color: rgb(233, 233, 233); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid transparent; padding: 4px 8px; cursor: default;\"><p data-lake-id=\"ac21623068b272da185ba88629f4c18b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">过程几个主要的参与者</p><ul data-lake-id=\"7d283e66c569b53b88f3b0f031568562\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"70c40230c6f305b6b9d328e8349773ff\"><strong><span>watcher：</span></strong><span>每一个 vue 组件会对应一个 watcher，赋值</span>解析表达式、收集依赖关系，并在表达式值发生变化时启动回调（响应式更新）</li><li data-lake-id=\"a2430dd771db08075915cb8b41f4c881\"><strong>observer：</strong>vue 实例的 data 和 其中的对象都会被附加一个&nbsp;<span>observer，该&nbsp;</span><span>observer 会劫持对象固有属性，转换为 getter/setters&nbsp;</span></li><li data-lake-id=\"06b261e15d2e9d9ef19982621b2b1176\"><strong>dep：</strong>每一个响应式属性<span>会对应一个 dep，Dep 类实际上是发布订阅模式的实现，subs[] 中保存了订阅在当前属性变化上的 watcher，dep.target 是当前的 watcher</span></li></ul></td></tr></tbody></table></div><p data-lake-id=\"2b0751049d2b6077994787694c480a14\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">进行源码分析后可以解释开始图片中两个重要过程的实现细节：</p><ul data-lake-id=\"22bead453f6cbce693feb1265208202e\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"37c9d6b4905fc9bb7303fadaac2fd95a\"><strong><span>收集依赖：</span></strong><span>渲染实例时必须通过 getter 获取属性，则当前组件实例的 watcher 会被存入 observer 的 dep 中，即该实例依赖于该属性</span></li><li data-lake-id=\"e43c26251acb22b9943c0ab1d0185c6a\"><strong><span>通知：</span></strong><span>通过 setters 修改对象&nbsp;property 时，对应属性的 dep 就会通知自己保存的所有 watcher，从而重新渲染</span></li></ul><p data-lake-id=\"8f9c6bc93a6ee0dbf2a4ce1220022c77\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h4 data-lake-id=\"9a11a35b988720b54c9fab8c8ec8a0d5\" id=\"d67gg\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><br></h4><p data-lake-id=\"7b3aa619325e504f39864e8fc99b6a07\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></div>",
  "slug": 29434549,
  "title": "【原理一】 Vue2.x 响应式原理"
}