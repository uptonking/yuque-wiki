{
  "body_html": "<!doctype html><a name=\"富文本编辑器开发系列-基础概念\"></a><h1 id=\"042ec337\">富文本编辑器开发系列-基础概念</h1><p><br /></p><p>[TOC]</p><p><br /></p><a name=\"前言\"></a><h2 id=\"df368884\">前言</h2><p><br /></p><p>富文本编辑器是前端开发中常见的功能，一般情况下，我们可以用成熟的开源富文本编辑器，比如比较老牌的 <code>ueditor, ckeditor</code> , 或者近几年兴起的 <code>draft.js</code> 等。</p><p><br /></p><p>但是，总会有二般情况：</p><p><br /></p><ul><li>实际应用需求超出了这些开源编辑器提供的标准功能；</li></ul><ul><li>实际应用需求很少，使用这些开源编辑器会过于复杂和臃肿；</li></ul><p><br /></p><p>这个时候，我们就面临着两种选择：</p><p><br /></p><ol start=\"1\"><li>对这些开源编辑器进行二次开发，以适应应用需求；</li></ol><ol start=\"2\"><li>自己从头撸一款富文本编辑器，自己掌控一切；</li></ol><p><br /></p><p>这两种选择，都意味着我们要对富文本编辑器的底层技术有所了解，甚至如果要自己撸一款富文本编辑器的话，还要非常精通这些技术，所以从本文开始，就将用比较通俗易懂的方式（就是好多好多动态图和逻辑图），对开发富文本编辑器涉及到的基础技术进行讲解。以帮助朋友们飞升（升职加薪走一波）。</p><p><br /></p><a name=\"富文本编辑器的基本发展史\"></a><h2 id=\"e3fbb799\">富文本编辑器的基本发展史</h2><p><br /></p><p>整体来说，富文本编辑器经历了三个阶段的发展。</p><p><br /></p><a name=\"1.0-时代- ——-原始时代，-code-contenteditable--code--大法好\"></a><h3 id=\"f442836b\">1.0 时代  —— 原始时代，<code>contenteditable</code> 大法好</h3><p><br /></p><p>在那个前端工程师还叫做网页设计师（俗称切图仔）的刀耕火种的年代，各种BBS留言板的出现，产生了对前端更丰富的文本编辑的需求，传统的<code>textarea</code>已经远远不能胜任，所以出现了第一代的富文本编辑器。</p><p><br /></p><p>那时候的编辑器存活到现在的已经没有了，但他们是开拓者，这些前辈开发者利用浏览器<code>DOM</code>提供的 <code>contenteditable</code> 属性和 <code>document.execCommand</code> 方法，开发出了第一代的轻量级的富文本编辑器。虽然其功能及其简单，也只是单纯利用了web浏览器提供的原生API，但是为后面2.0时代的富文本编辑器打下了基础。</p><p><br /></p><p><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/20201210151335.jpeg#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><a name=\"2.0-时代-——-现代化，视图与模型分离\"></a><h3 id=\"df6dd401\">2.0 时代 —— 现代化，视图与模型分离</h3><p><br /></p><p>进入2.0时代，由于浏览器<code>document.execCommand</code> 有着各种各样的问题，大神们决定自己实现<code>execCommand</code> 方法，自己掌控内容的变化与格式，由此产生了一大批优秀的更加现代化的富文本编辑器，如<code>ueditor</code>，<code>ckeditor</code> 早期版本等。</p><p><br /></p><p><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/20201210151342.png#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>后来，进入21世纪后，视图与模型分离的思想逐渐征服了前端的大神们，于是又出现了改进版的将视图与数据模型进行分离管理的现代化编辑器，如<code>draft.js</code> , <code>ckeditor</code> 后期版本等。</p><p><br /></p><p><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/20201210151356.png#alt=image-20200827101736796\" style=\"max-width: 600px;\" /></p><p><br /></p><a name=\"3.0-时代-——-后现代，-抛弃--code-contenteditable--code-\"></a><h3 id=\"bd39346b\">3.0 时代 —— 后现代， 抛弃 <code>contenteditable</code></h3><p><br /></p><p>由于急于<code>contenteditable</code>的编辑器，其输入完全是由用户掌控，而非由开发者掌控，所以就会出现无穷种不同的<code>dom</code>结构，造成各种不可控不可预知的行为后果，这对于追求可控严谨的前端工程师们来说简直是噩梦。所以出现了3.0时代的富文本编辑器。</p><p><br /></p><p>开发者彻底摒弃了<code>contenteditable</code>属性，而是完全使用普通布局容器加<code>js</code>对DOM事件的监听实现，完全将富文本编辑器的输入到渲染的整个流程都在自己的掌控之中。比如 <code>google docs</code>, <code>office online</code>, <code>icloud pages</code>, <code>wps在线编辑</code>等。</p><p><br /></p><p><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/20201210151820.png#alt=image-20200827102744432\" style=\"max-width: 600px;\" /></p><p><br /></p><p>因为第三代编辑器实现起来动辄需要几十万到几百万行代码，需要一个非常庞大和专业的团队去开发和维护，也只有文本编辑的巨头能搞得起，所以，当前应用最广的依旧是第二代浏览器。</p><p><br /></p><a name=\"基础概念\"></a><h2 id=\"8519e085\">基础概念</h2><p><br /></p><a name=\"编辑区\"></a><h3 id=\"a9f5cb5f\">编辑区</h3><p><br /></p><p>在一个完整应用界面中，富文本编辑器通常都是一个表单的一部分，而在编辑器中，编辑区是除去工具条（各种功能按钮所在区域）和状态栏（显示字数等额外信息）以外的，允许用户输入内容的区域。</p><p><br /></p><p>但是编辑区并不是富文本编辑器独有的概念，事实上，只要是设置了<code>contenteditable</code> 属性的<code>DOM</code>元素包裹的内容区，都允许用户输入内容和对其中的内容进行修改，那这块内容区就是可编辑区，而富文本编辑器只是继承了这种特性和概念。</p><p><br /></p><p><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/20201210151828.png#alt=image-20200827103932904\" style=\"max-width: 600px;\" /></p><p><br /></p><a name=\"选区\"></a><h3 id=\"9914ba87\">选区</h3><p><br /></p><p>选区是指当一个编辑区获得焦点时，用户选择的文本范围或插入符号的当前位置。 现代浏览器通常一个编辑区都只有一个选区，只要火狐浏览器可以在一个编辑器内通过按住键盘<code>alt</code> 键产生多个选区。一个选区可以包含多个<code>DOM</code>元素，即它是可以跨节点的。</p><p><br /></p><p><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/20201210151843.png#alt=image-20200827105347754\" style=\"max-width: 600px;\" /></p><p><br /></p><a name=\"拖蓝\"></a><h3 id=\"d6bd4b25\">拖蓝</h3><p><br /></p><p>拖蓝，表示一个包含节点与文本节点的一部分的文档片段。通常情况下，选区与拖蓝所包含的<code>DOM</code>元素部分是相同的，它们的不同在于其本质，选区偏重于强调范围和位置，而拖蓝强调的则是包含的<code>DOM</code>内容。从它的表现形式就可以知道它为什么为叫做拖蓝（拖动后产生的蓝色区域）。</p><p><br /></p><blockquote><p>当然，拖蓝是中文意译法，其英文是<code>range</code>（范围）</p></blockquote><p><br /></p><p><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/20201210151857.png#alt=image-20200827105702294\" style=\"max-width: 600px;\" /></p><p><br /></p><a name=\"光标\"></a><h3 id=\"9f2a0d3a\">光标</h3><p><br /></p><p>光标是特殊的拖蓝，可以认为光标就是移动拖蓝的某个端点到另一个端点的位置，两个端点重合时所在的区域或位置。</p><p><br /></p><p><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/20201210151924.gif#alt=\" style=\"max-width: 600px;\" /></p><p><br /></p><a name=\"基本API\"></a><h2 id=\"0e8799c2\">基本API</h2><p><br /></p><a name=\"-code-contenteditable--code-\"></a><h3 id=\"333a2c9d\"><code>contenteditable</code></h3><p><br /></p><p>该属性用在<code>DOM</code>元素上，它用来表明元素是否可编辑，如：</p><p><br /></p><pre><code>&lt;div contenteditable=&quot;true&quot;&gt;&lt;/div&gt;</code></pre><p><br /></p><p>上面的<code>HTML</code> 语句表明这个<code>div</code>包裹的区域是允许用户进行编辑的。</p><p><br /></p><p>这个属性有三个可选值：</p><p><br /></p><ul><li><code>&quot;true&quot;</code> 表明该元素可编辑。</li></ul><ul><li><code>&quot;false&quot;</code> 表明该元素不可编辑。</li></ul><ul><li><code>&quot;inherit&quot;</code> 表明该元素继承了其父元素的可编辑状态</li></ul><p><br /></p><a name=\"-code-document.execCommand()--code-\"></a><h3 id=\"d3c68546\"><code>document.execCommand()</code></h3><p><br /></p><p>这是<code>HTML</code>文档对象的一个方法，该方法可以被用来操纵可编辑内容区域的元素。</p><p><br /></p><a name=\"语法\"></a><h3 id=\"f2b0b493\">语法</h3><p><br /></p><p><code>bool = document.execCommand(name, isShowDefaultUI, argument);</code></p><p><br /></p><a name=\"参数说明\"></a><h3 id=\"21f2fa80\">参数说明</h3><p><br /></p><ul><li><code>name</code> ， 字符串，命令的名称，可用命令见下文表格</li></ul><ul><li><code>isShowDefaultUI</code>布尔值，是否展示用户界面，一般为 <code>false</code>， 并且<code>Mozilla</code> 没有实现</li></ul><ul><li><code>augument</code>  额外参数，某些命令需要传入额外的参数</li></ul><p><br /></p><p>具体可阅读 <a href=\"./%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%B5%8F%E8%A7%88%E5%99%A8document.execCommond()API.md\">document.execCommand 的API</a></p><p><br /></p><a name=\"-code-selection-&amp;&amp;-range--code-\"></a><h3 id=\"3161d81e\"><code>selection &amp;&amp; range</code></h3><p><br /></p><p><code>seleection</code> 和 <code>range</code>  都是<code>Web API</code>的一部分，同时他们也是实现在开发富文本编辑器中最常用到的<code>API</code>.</p><p><br /></p><p>对于它们的具体研究，请参阅：</p><p><br /></p><ul><li>\n<a href=\"./%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94selection.md\">富文本编辑器开发系列——selection</a>\n</li></ul><ul><li>\n<a href=\"./%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94Range%E5%AF%B9%E8%B1%A1.md\">富文本编辑器开发系列——Range对象</a>\n</li></ul><p><br /></p><p><code>DOM</code></p><p><br /></p><p>在实现富文本编辑器的过程中，需要大量的<code>DOM</code>操作，这就要求我们要对<code>DOM</code>的各种<code>API</code>非常熟悉，才能运用正确的<code>API</code> 准确实现预期的功能。</p><p><br /></p><p>当然，<code>DOM API</code> 非常之多而且很庞杂，很多都是富文本编辑器开发中用不到的，基于此考虑，我单独介绍了开发富文本编辑器常用的<code>DOM API</code>， 请参阅：</p><p><br /></p><p>[富文本编辑器开发系列——常用DOM API](富文本编辑器开发系列——常用DOM API.md)</p>",
  "slug": 80566000,
  "title": "富文本编辑器开发系列1——基础概念"
}