{
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h1 id=\"2993caf0\"><span class=\"ne-text\">原生API编写简单富文本编辑器003</span></h1><p id=\"u6b6ab636\" class=\"ne-p\"><br></p><p id=\"u412234b3\" class=\"ne-p\"><span class=\"ne-text\">在上一节，我们实现了一个简单的富文本编辑器，但是其中很多功能按钮点击还没有反应，因为这些功能需要参数，而我们并没有提供参数，这一节就来实现这些功能，它们包括：</span></p><p id=\"uab29347f\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u87bba6ac\"><span class=\"ne-text\">字体</span></li></ul><ul class=\"ne-ul\"><li id=\"uaadbbba7\"><span class=\"ne-text\">字号</span></li></ul><ul class=\"ne-ul\"><li id=\"u0e1e6a53\"><span class=\"ne-text\">前景色</span></li></ul><ul class=\"ne-ul\"><li id=\"ue3bbf8d6\"><span class=\"ne-text\">背景色</span></li></ul><ul class=\"ne-ul\"><li id=\"ud5fdb0d5\"><span class=\"ne-text\">插入链接</span></li></ul><ul class=\"ne-ul\"><li id=\"ued5f8c82\"><span class=\"ne-text\">取消链接</span></li></ul><p id=\"uf11d28dd\" class=\"ne-p\"><br></p><h2 id=\"aa694480\"><span class=\"ne-text\">字体设置</span></h2><p id=\"uc4716f50\" class=\"ne-p\"><br></p><p id=\"u14e88b35\" class=\"ne-p\"><span class=\"ne-text\">要设置字体，首先我们需要一个字体列表，为了能够在大多数电脑上显示正确的字体，我们目前就挑选一些系统自带的常用字体组成一个字体列表。</span></p><p id=\"u290c1281\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"27636ee8\" class=\"ne-codeblock language-javascript\">// index.js\n……\n\nconst fontFamilys = [\n\n '仿宋',\n\n '黑体',\n\n '楷体',\n\n '宋体',\n\n '微软雅黑',\n\n '新宋体',\n\n 'Calibri',\n\n 'Consolas',\n\n 'Droid Sans',\n\n ];</pre><p id=\"ud90227af\" class=\"ne-p\"><br></p><p id=\"u5bf0caa7\" class=\"ne-p\"><span class=\"ne-text\">然后当我们点击字体设置按钮时，动态生成一个字体选择组件，插入到字体选择按钮下方。</span></p><p id=\"ua90af724\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"3c6723f7\" class=\"ne-codeblock language-javascript\">\nbtn.onclick = function(e) {\n\n if (command === 'fontName') {\n\n showFontName(e);\n\n } else {\n\n document.execCommand(command, true, '');\n\n }\n\n };\n\n\nfunction showFontName(e) {\n// 定义字体列表\n const fontFamilys = [\n\n '仿宋',\n\n '黑体',\n\n '楷体',\n\n '宋体',\n\n '微软雅黑',\n\n '新宋体',\n\n 'Calibri',\n\n 'Consolas',\n\n 'Droid Sans',\n\n ];\n // 生成字体选择列表模板\n\n let tpl = '&lt;div class=&quot;editor-dialog-fontfamily&quot;&gt;';\n\n tpl += '&lt;ul&gt;';\n\n for (let i = 0; i &lt; fontFamilys.length; i++) {\n\n tpl += `&lt;li onclick=&quot;selectFontFamily('${fontFamilys[i]}')&quot;&gt;${fontFamilys[i]}&lt;/li&gt;`;\n\n }\n\n tpl+ '&lt;/ul&gt;';\n\n tpl += '&lt;/div&gt;';\n\n// 将字体选择列表填充到通用弹窗内\n\n let dialog = document.getElementById('editorDialog');\n\n dialog.innerHTML = tpl;\n\t\n// 获取按钮的相对位置坐标\n\n let target = e.target;\n\n let left = target.offsetLeft;\n\n let top = target.offsetTop;\n\t\n\t\n// 将弹窗放置在按钮下方位置并显示出来\n\n dialog.style.left = left + 'px';\n\n dialog.style.top = top + target.offsetHeight + 20 + 'px';\n\n dialog.style.display = 'block';\n\n}</pre><p id=\"u5a27ae4c\" class=\"ne-p\"><br></p><p id=\"u2b5eeddb\" class=\"ne-p\"><span class=\"ne-text\">在HTML中，我们需要一个专门放弹出框的元素：</span></p><p id=\"ue7813786\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"2211f5a9\" class=\"ne-codeblock language-javascript\">&lt;div class=&quot;editor&quot;&gt;\n\n\t &lt;div id=&quot;editorBar&quot; class=&quot;editor-toolbar&quot;&gt;\n\t\t//...\n\n\t &lt;/div&gt;\n\n\t &lt;div id=&quot;editorContent&quot; class=&quot;editor-content&quot; contenteditable=&quot;true&quot;&gt;&lt;/div&gt;\n\n\t &lt;div id=&quot;editorDialog&quot;&gt;&lt;/div&gt;  &lt;!-- 专门放置弹出框 --&gt;\n\n &lt;/div&gt;</pre><p id=\"u152635e3\" class=\"ne-p\"><br></p><p id=\"ue3972c2a\" class=\"ne-p\"><span class=\"ne-text\">在CSS中，给弹出框和字体选择列表一些简单的样式：</span></p><p id=\"u153593aa\" class=\"ne-p\"><br></p><pre data-language=\"css\" id=\"99394ad8\" class=\"ne-codeblock language-css\">\n.editor {\n\n// ...\n\n position: relative;\n\n}\n\n#editorDialog {\n\n position: absolute;\n\n display: none;\n\n border: 1px solid #e9e9e9;\n\n z-index: 100;\n\n}\n\n  \n\n.editor-dialog-fontfamily ul {\n\n list-style: none;\n\n padding: 0;\n\n padding-right: 15px;\n\n}\n\n  \n\n.editor-dialog-fontfamily ul li {\n\n height: 30px;\n\n line-height: 30px;\n\n padding-left: 10px;\n\n cursor: pointer;\n\n}\n\n  \n\n.editor-dialog-fontfamily ul li:hover {\n\n background-color: #cecece;\n\n}</pre><p id=\"u3f6ccf09\" class=\"ne-p\"><br></p><p id=\"udca06e53\" class=\"ne-p\"><span class=\"ne-text\">看看效果：</span></p><p id=\"u102efc64\" class=\"ne-p\"><br></p><p id=\"u749c28b8\" class=\"ne-p\"><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202204291654159.png\" width=\"1012\" id=\"OWZc5\" class=\"ne-image\"></p><p id=\"u9abf8a22\" class=\"ne-p\"><br></p><p id=\"ub207ef06\" class=\"ne-p\"><span class=\"ne-text\">然后我们实现选择具体字体后的方法：</span></p><p id=\"u2a909c92\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"d5825440\" class=\"ne-codeblock language-javascript\">function selectFontFamily(fontName) {\n\n const rs = document.execCommand('fontName', true, fontName);\n\n console.log(rs);\n\n}</pre><p id=\"u9c95dab1\" class=\"ne-p\"><br></p><p id=\"u8af3f09c\" class=\"ne-p\"><span class=\"ne-text\">我们发现，当我们点击选择某个字体后，编辑区中所选的文字字体并没有改变，并且控制台输出执行结果，发现是</span><code class=\"ne-code\"><span class=\"ne-text\">false</span></code><span class=\"ne-text\">。</span></p><p id=\"u22bdc54d\" class=\"ne-p\"><br></p><p id=\"u0a7ba4a1\" class=\"ne-p\"><span class=\"ne-text\">原因是，当我们点击某个字体的时候，浏览器就会取消编辑区内的选区，所以当我们执行命令时，并没有选区，所以会执行失败。</span></p><p id=\"u5bc32df5\" class=\"ne-p\"><br></p><p id=\"u0ed63757\" class=\"ne-p\"><span class=\"ne-text\">现在我们对上面的代码进行改造，将字体列表改造为一个下拉选框，当选择值变化时，设置字体</span></p><p id=\"u72964fca\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"e3538955\" class=\"ne-codeblock language-javascript\">let tpl = '&lt;div class=&quot;editor-dialog-fontfamily&quot;&gt;';\n\n tpl += '&lt;select id=&quot;fontNameSelect&quot; onchange=&quot;selectFontFamily()&quot;&gt;';\n\n for (let i = 0; i &lt; fontFamilys.length; i++) {\n\n tpl += `&lt;option value=&quot;${fontFamilys[i]}&quot; style=&quot;font-family: '${fontFamilys[i]}'&quot;&gt;${fontFamilys[i]}&lt;/option&gt;`;\n\n }\n\n tpl+ '&lt;/select&gt;';\n\n tpl += '&lt;/div&gt;';\n\n//...\n\n\nfunction selectFontFamily() {\n\n const target = document.getElementById('fontNameSelect');\n\n const rs = document.execCommand('fontName', true, target.value);\n\n console.log(rs);\n\n}</pre><p id=\"u316de50f\" class=\"ne-p\"><br></p><p id=\"u057f8b86\" class=\"ne-p\"><span class=\"ne-text\">这时我们再看：</span></p><p id=\"u20e60392\" class=\"ne-p\"><br></p><p id=\"uca4b4c1e\" class=\"ne-p\"><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202204291750453.png\" width=\"468\" id=\"oFQBc\" class=\"ne-image\"></p><p id=\"u62eedc05\" class=\"ne-p\"><br></p><p id=\"u94dedc0d\" class=\"ne-p\"><span class=\"ne-text\">到此，终于完成了字体的设置功能，接下来我们先对字体设置功能进行一定的优化——与其点击某个按钮才弹出下拉框选择，不如一开始就用下拉框替代按钮</span></p><p id=\"u0e9e1774\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"87f289eb\" class=\"ne-codeblock language-javascript\">window.onload= function() {\n\n const btns = document.getElementById('editorBar').getElementsByTagName('button');\n\n for (let i=0; i&lt;btns.length; i++) {\n\n const btn = btns[i];\n\n const command = btn.getAttribute('command');\n\n if (command === 'fontName') {\n\n showFontName(btn);\n\n }\n\n btn.onclick = function(e) {\n\n document.execCommand(command, 'true', '');\n\n };\n\n }\n\n};\n\n\nfunction showFontName(btn) {\n\n let tpl = getFontNameTpl();\n\n const $li = btn.parentElement;\n\n $li.innerHTML = tpl;\n\n}\n\n\nfunction getFontNameTpl() {\n\n const fontFamilys = [\n\n '仿宋',\n\n '黑体',\n\n '楷体',\n\n '宋体',\n\n '微软雅黑',\n\n '新宋体',\n\n 'Calibri',\n\n 'Consolas',\n\n 'Droid Sans',\n\n 'Microsoft YaHei',\n\n ];\n\n let tpl = '';\n\n tpl += '&lt;select id=&quot;fontNameSelect&quot; onchange=&quot;selectFontFamily()&quot;&gt;';\n\n for (let i = 0; i &lt; fontFamilys.length; i++) {\n\n tpl += `&lt;option value=&quot;${fontFamilys[i]}&quot; style=&quot;font-family: '${fontFamilys[i]}'&quot;&gt;${fontFamilys[i]}&lt;/option&gt;`;\n\n }\n\n tpl+ '&lt;/select&gt;';\n\n return tpl;\n\n}</pre><p id=\"uf8c42e70\" class=\"ne-p\"><br></p><p id=\"ufa13c42e\" class=\"ne-p\"><span class=\"ne-text\">还需要改一下CSS，取消按钮</span><code class=\"ne-code\"><span class=\"ne-text\">li</span></code><span class=\"ne-text\">的宽度限制，并给一个下边距：</span></p><p id=\"uc123e3fb\" class=\"ne-p\"><br></p><pre data-language=\"css\" id=\"b6a5f98a\" class=\"ne-codeblock language-css\">.editor-toolbar ul li {\n\n height: 20px;\n\n line-height: 20px;\n\n display: inline-block;\n\n cursor: pointer;\n\n margin-left: 10px;\n\n margin-bottom: 10px;\n\n}</pre><p id=\"ub62ee076\" class=\"ne-p\"><br></p><p id=\"ue1611938\" class=\"ne-p\"><span class=\"ne-text\">看下最终效果：</span></p><p id=\"uec9741b6\" class=\"ne-p\"><br></p><p id=\"u5720c1fe\" class=\"ne-p\"><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202204291809961.png\" width=\"1030\" id=\"lRtDO\" class=\"ne-image\"></p><p id=\"u34db952f\" class=\"ne-p\"><br></p><h2 id=\"fc55aff8\"><span class=\"ne-text\">字号</span></h2><p id=\"u7556b6af\" class=\"ne-p\"><br></p><p id=\"u213f0865\" class=\"ne-p\"><span class=\"ne-text\">字号与字体是相同的作用机制，我们补充下代码：</span></p><p id=\"u64cee991\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"d1d0b885\" class=\"ne-codeblock language-javascript\">\nconst command = btn.getAttribute('command');\n\n if (command === 'fontName') {\n\n showFontName(btn);\n\n }\n\n if (command === 'fontSize') {\n\n showFontSize(btn);\n\n }\n\n\n// ...\n\nfunction getFontSizeTpl() {\n\n const fontSizes = [\n\n '12',\n\n '14',\n\n '16',\n\n '18',\n\n '20',\n\n '24',\n\n '28',\n\n '36',\n\n '48',\n\n '72',\n\n ];\n\n let tpl = '';\n\n tpl += '&lt;select id=&quot;fontSizeSelect&quot; onchange=&quot;selectFontSize()&quot;&gt;';\n\n for (let i = 0; i &lt; fontSizes.length; i++) {\n\n tpl += `&lt;option value=&quot;${fontSizes[i]}&quot; style=&quot;font-size: '${fontSizes[i]}'&quot;&gt;${fontSizes[i]}&lt;/option&gt;`;\n\n }\n\n tpl+ '&lt;/select&gt;';\n\n return tpl;\n\n}\n\n  \n\nfunction showFontSize(btn) {\n\n let tpl = getFontSizeTpl();\n\n const $li = btn.parentElement;\n\n $li.innerHTML = tpl;\n\n}\n\n  \n\nfunction selectFontSize() {\n\n const target = document.getElementById('fontSizeSelect');\n\n const rs = document.execCommand('fontSize', true, parseInt(target.value) + 'px');\n\n}</pre><p id=\"uf9b09fc3\" class=\"ne-p\"><br></p><p id=\"u470a7ee7\" class=\"ne-p\"><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202205050952028.png\" width=\"1300\" id=\"Tsc7T\" class=\"ne-image\"></p><p id=\"u1df91b95\" class=\"ne-p\"><br></p><p id=\"uc15f59e6\" class=\"ne-p\"><span class=\"ne-text\">我们会发现，在下拉框中，我们未字体提供了若干以像素为单位的值，并且当用户选择时，我们会将这个像素值作为</span><code class=\"ne-code\"><span class=\"ne-text\">execCommand</span></code><span class=\"ne-text\">命令的参数，但是实际操作时，无论我们选择多少的字号，最后的字号始终是一样大的。</span></p><p id=\"u14c97ae1\" class=\"ne-p\"><br></p><p id=\"ub5b7e97e\" class=\"ne-p\"><span class=\"ne-text\">通过查看控制台元素面板，我们发现无论我们传入什么值，最终浏览器给文字加的控制字号的属性</span><code class=\"ne-code\"><span class=\"ne-text\">size</span></code><span class=\"ne-text\"> 都是 </span><code class=\"ne-code\"><span class=\"ne-text\">7</span></code><span class=\"ne-text\">。</span></p><p id=\"ude5a2ac3\" class=\"ne-p\"><br></p><p id=\"u6854f88f\" class=\"ne-p\"><span class=\"ne-text\">再仔细翻看</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">文档</span></a><span class=\"ne-text\">，我们看到对</span><code class=\"ne-code\"><span class=\"ne-text\">fontSize</span></code><span class=\"ne-text\"> 命令的说明：</span></p><p id=\"u9f81a795\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ua8a3de19\" class=\"ne-p\"><span class=\"ne-text\">fontSize : 在插入点或者选中文字部分修改字体大小. 需要提供一个HTML字体尺寸 (1-7) 作为参数</span></p></div><p id=\"u95c14dd3\" class=\"ne-p\"><br></p><p id=\"uc002715d\" class=\"ne-p\"><span class=\"ne-text\">所以当我们传入超出范围的不合法参数时，它会始终将字体设置为最大尺寸</span><code class=\"ne-code\"><span class=\"ne-text\">7</span></code><span class=\"ne-text\">。</span></p><p id=\"u1e45ad1e\" class=\"ne-p\"><br></p><p id=\"uf0be9971\" class=\"ne-p\"><span class=\"ne-text\">修改一下：</span></p><p id=\"ub8dd03a8\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"a9be7e33\" class=\"ne-codeblock language-javascript\">const fontSizes = [\n\n '1',\n\n '2',\n\n '3',\n\n '4',\n\n '5',\n\n '6',\n\n '7',\n\n ];</pre><p id=\"uac13dac1\" class=\"ne-p\"><br></p><p id=\"u281c11a9\" class=\"ne-p\"><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202205050959011.png\" width=\"869\" id=\"jx3wU\" class=\"ne-image\"></p><p id=\"u7a70e248\" class=\"ne-p\"><br></p><p id=\"u61cf5275\" class=\"ne-p\"><span class=\"ne-text\">这回就正常了，可是用户并不知道1-7代表的具体大小对应的是常见的文档软件（例如word）中的大小（通常以像素表示）,我们需要继续改造：</span></p><p id=\"u11f926bd\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"819cc7b2\" class=\"ne-codeblock language-javascript\">function getFontSizeTpl() {\n\n const fontSizes = [\n\n {\n\n key: 1,\n\n value: '12',\n\n },\n\n {\n\n key: 2,\n\n value: '13',\n\n },\n\n {\n\n key: 3,\n\n value: '16',\n\n },\n\n {\n\n key: 4,\n\n value: '18',\n\n },\n\n {\n\n key: 5,\n\n value: '24',\n\n },\n\n {\n\n key: 6,\n\n value: '32',\n\n },\n\n {\n\n key: 7,\n\n value: '48',\n\n },\n\n ];\n\n let tpl = '';\n\n tpl += '&lt;select id=&quot;fontSizeSelect&quot; onchange=&quot;selectFontSize()&quot;&gt;';\n\n for (let i = 0; i &lt; fontSizes.length; i++) {\n\n tpl += `&lt;option value=&quot;${fontSizes[i].key}&quot; style=&quot;font-size: '${fontSizes[i].value}px'&quot;&gt;${fontSizes[i].value}&lt;/option&gt;`;\n\n }\n\n tpl+ '&lt;/select&gt;';\n\n return tpl;\n\n}</pre><p id=\"u45c1baaa\" class=\"ne-p\"><br></p><p id=\"u6d945450\" class=\"ne-p\"><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202205051011652.png\" width=\"532\" id=\"amBEh\" class=\"ne-image\"></p><p id=\"u6c580335\" class=\"ne-p\"><br></p><p id=\"u2abd1b9e\" class=\"ne-p\"><span class=\"ne-text\">总算是正常了。</span></p><p id=\"u90b95159\" class=\"ne-p\"><br></p><h2 id=\"ebf2453e\"><span class=\"ne-text\">前景色</span></h2><p id=\"u10cd788d\" class=\"ne-p\"><br></p><p id=\"u1c8ada3c\" class=\"ne-p\"><span class=\"ne-text\">众所周知，要想随心所欲地设置富文本的颜色，必须提供一个颜色选择器，我们这里暂不考虑浏览器兼容性，直接使用HTML5中 </span><code class=\"ne-code\"><span class=\"ne-text\">type</span></code><span class=\"ne-text\"> 为 </span><code class=\"ne-code\"><span class=\"ne-text\">color</span></code><span class=\"ne-text\"> 的</span><code class=\"ne-code\"><span class=\"ne-text\">input</span></code><span class=\"ne-text\"> 组件。</span></p><p id=\"u011164c2\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"561ec585\" class=\"ne-codeblock language-javascript\">function showColorPicker(btn, type) {\n\n let tpl = getColorPickerTpl();\n\n const $dialog = document.getElementById('editorDialog');\n\n $dialog.innerHTML = tpl;\n\n $dialog.style.top = (btn.offsetTop + btn.offsetHeight + 15) + 'px';\n\n $dialog.style.left = btn.offsetLeft + 'px';\n\n $dialog.style.display = 'block';\n\n const colorPicker = document.getElementById('colorPicker');\n\n colorPicker.addEventListener(&quot;input&quot;, setColor.bind(this, type), false);\n\n colorPicker.addEventListener(&quot;change&quot;, setColor.bind(this, type), false);\n\t\ndocument.addEventListener(&quot;click&quot;, function(e) {\n\n e.stopPropagation();\n\n const $i = btn.firstChild;\n\n if (e.target !== $i &amp;&amp; e.target !==colorPicker) {\n\n $dialog.style.display = 'none';\n\n }\n\n });\n\n}\n\n  \n\nfunction getColorPickerTpl(type) {\n\n const tpl = `\n\n &lt;input type=&quot;color&quot; id=&quot;colorPicker&quot; /&gt;\n\n `;\n\n return tpl;\n\n}\n\n  \n\nfunction setColor(type, event) {\n\n const $dialog = document.getElementById('editorDialog');\n\n document.execCommand(type, 'false', event.target.value);\n\n $dialog.style.display = 'none';\n\n  \n\n}</pre><p id=\"ub5e3b025\" class=\"ne-p\"><br></p><p id=\"u9b27b2bc\" class=\"ne-p\"><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202205051046255.png\" width=\"1056\" id=\"ePdKX\" class=\"ne-image\"></p><p id=\"u938478b0\" class=\"ne-p\"><br></p><h2 id=\"2f97db95\"><span class=\"ne-text\">背景色</span></h2><p id=\"u09593187\" class=\"ne-p\"><br></p><p id=\"ua8be826d\" class=\"ne-p\"><span class=\"ne-text\">背景色的逻辑与前景色一样，所以其逻辑可以复用，只需要传入不同参数即可：</span></p><p id=\"ue96d7c7e\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"a537bfa5\" class=\"ne-codeblock language-javascript\"> btn.onclick = function(e) {\n\n document.execCommand(command, 'true', '');\n\n if (command === 'fontColor') {\n\n showColorPicker(btn, 'foreColor');\n\n }\n\n if (command === 'backColor') {\n\n showColorPicker(btn, 'backColor');\n\n }\n\n };</pre><p id=\"u5483bfca\" class=\"ne-p\"><br></p><p id=\"u4da9693d\" class=\"ne-p\"><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202205051049805.png\" width=\"1019\" id=\"lFFtC\" class=\"ne-image\"></p><p id=\"uac111e18\" class=\"ne-p\"><br></p><p id=\"u2cd1532f\" class=\"ne-p\"><span class=\"ne-text\">但是，这里有一个问题，我们为文档对象和调色板绑定了事件监听，但却没有在任何地方进行解绑。</span></p><p id=\"u54c980f1\" class=\"ne-p\"><br></p><p id=\"ub3a8ae35\" class=\"ne-p\"><span class=\"ne-text\">为了完善解绑功能，我们需要定义两个全局变量来分别存储设置富文本内容字体的监听函数和解绑监听隐藏调色板的函数。因为两个监听函数使用了</span><code class=\"ne-code\"><span class=\"ne-text\">bind</span></code><span class=\"ne-text\"> 方法已便传参，但</span><code class=\"ne-code\"><span class=\"ne-text\">bind</span></code><span class=\"ne-text\">的问题是，它会产生一个新的函数，所以我们需要将这个新产生的函数缓存下来，以便在移除监听时传入与绑定时相同的函数。</span></p><p id=\"u68fbec5b\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"bae653b8\" class=\"ne-codeblock language-javascript\">var hideColorPickerFun;\n\nvar setColorFun;\n\nfunction showColorPicker(btn, type) {\n\n\t//...\n\thideColorPickerFun = hideColorPicker.bind(document, colorPicker, $dialog, btn, type);\n\n\t setColorFun = setColor.bind(this, type, $dialog, colorPicker, btn);\n\n\t colorPicker.addEventListener(&quot;input&quot;, setColorFun, false);\n\n\t colorPicker.addEventListener(&quot;change&quot;, setColorFun, false);\n\n\t document.addEventListener(&quot;click&quot;, hideColorPickerFun, false);\n}\n\nfunction hideColorPicker(colorPicker, $dialog, btn, type, e) {\n\n e.stopPropagation();\n\n const $i = btn.firstChild;\n\n if (e.target !== $i &amp;&amp; e.target !==colorPicker) {\n\n $dialog.style.display = 'none';\n\n document.removeEventListener('click', hideColorPickerFun, false);\n\n colorPicker.removeEventListener('input', setColorFun, false);\n\n colorPicker.removeEventListener('change', setColorFun, false);\n\n $dialog.innerHTML = '';\n\n }\n\n}\n\n  \n\nfunction setColor(type, $dialog, colorPicker, btn, event) {\n\n document.execCommand(type, 'false', event.target.value);\n\n $dialog.style.display = 'none';\n\n document.removeEventListener('click', hideColorPickerFun, false);\n\n colorPicker.removeEventListener('input', setColorFun, false);\n\n colorPicker.removeEventListener('change', setColorFun, false);\n\n $dialog.innerHTML = '';\n\n}</pre><p id=\"uf6002bba\" class=\"ne-p\"><br></p><p id=\"ub32f6b38\" class=\"ne-p\"><span class=\"ne-text\">另外，在给功能按钮绑定事件时，我们将条件判断改为分支判断，方便扩展：</span></p><p id=\"u9f342e88\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"5a6e2d45\" class=\"ne-codeblock language-javascript\"> btn.onclick = function(e) {\n\n switch (command) {\n\n case 'fontColor':\n\n showColorPicker(btn, 'foreColor');\n\n break;\n\n case 'backColor':\n\n showColorPicker(btn, 'backColor');\n\n break;\n\n default:\n\n document.execCommand(command, 'true', '');\n\n }\n\n };</pre><p id=\"u4d821a73\" class=\"ne-p\"><br></p><h2 id=\"a654c11d\"><span class=\"ne-text\">插入链接</span></h2><p id=\"u393271c7\" class=\"ne-p\"><br></p><p id=\"u02b4924f\" class=\"ne-p\"><span class=\"ne-text\">插入链接的流程是当点击插入链接按钮的时候，弹出一个填写链接的输入框和一个确定按钮，点击确定按钮，为选中的文字增加链接。</span></p><p id=\"u780ad943\" class=\"ne-p\"><br></p><p id=\"ua46834f1\" class=\"ne-p\"><span class=\"ne-text\">直接上代码：</span></p><p id=\"ude87d4d3\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"d41eb134\" class=\"ne-codeblock language-javascript\">switch (command) {\n\n case 'fontColor':\n\n showColorPicker(btn, 'foreColor');\n\n break;\n\n case 'backColor':\n\n showColorPicker(btn, 'backColor');\n\n break;\n\n case 'createLink':\n\n showLinkDialog(btn);\n\n break;\n\n default:\n\n document.execCommand(command, 'true', '');\n\n }\n\n\n\nfunction showLinkDialog(btn) {\n\n const tpl = getLinkDialogTpl();\n\n const $dialog = document.getElementById('editorDialog');\n\n $dialog.innerHTML = tpl;\n\n $dialog.style.top = (btn.offsetTop + btn.offsetHeight + 15) + 'px';\n\n $dialog.style.left = btn.offsetLeft + 'px';\n\n $dialog.style.display = 'block';\n\n const linkDialog = document.getElementById('linkDialog');\n\n linkDialog.focus();\n\n const createLinkBtn = document.getElementById('createLinkBtn');\n\n createLinkBtn.addEventListener('click', createLink, false);\n\n}\n\n  \n\nfunction getLinkDialogTpl() {\n\n const tpl = `\n\n &lt;input type=&quot;text&quot; id=&quot;linkDialog&quot; /&gt;\n\n &lt;button id=&quot;createLinkBtn&quot;&gt;确定&lt;/button&gt;\n\n `;\n\n return tpl;\n\n}\n\n  \n\nfunction createLink() {\n\n const linkDialog = document.getElementById('linkDialog');\n\n document.execCommand('createLink', 'false', linkDialog.value);\nconst createLinkBtn = document.getElementById('createLinkBtn');\n\n createLinkBtn.removeEventListener('click', createLink, false);\n\n const $dialog = document.getElementById('editorDialog');\n\n $dialog.innerHTML = '';\n\n $dialog.style.display = 'none';\n\n}</pre><p id=\"u77eff2c5\" class=\"ne-p\"><br></p><p id=\"u2079668d\" class=\"ne-p\"><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202205120936606.png\" width=\"947\" id=\"xbaqw\" class=\"ne-image\"></p><p id=\"uaa5f8daa\" class=\"ne-p\"><br></p><p id=\"uee5fd72f\" class=\"ne-p\"><span class=\"ne-text\">但是这里还有一个问题，当我们的焦点转移到链接输入框时，编辑器中的选区就被取消了，需要我们重新选择文本后再点击确定按钮，才能添加成功。</span></p><p id=\"ue72a37b7\" class=\"ne-p\"><br></p><p id=\"u64f40212\" class=\"ne-p\"><span class=\"ne-text\">这个问题的原因和解决方法我们先暂时搁置，后面再细讲。</span></p><p id=\"u3370c455\" class=\"ne-p\"><br></p><h2 id=\"96f7fba2\"><span class=\"ne-text\">取消链接</span></h2><p id=\"u754b11bd\" class=\"ne-p\"><br></p><p id=\"u751f7325\" class=\"ne-p\"><span class=\"ne-text\">之前插入链接不起作用是因为我们的编辑器没有插入链接功能，无法插入链接，就无法验证取消链接功能，现在我们给编辑器加上了插入链接功能，插入链接后，选中链接，直接点击取消链接按钮，链接就能被取消了。</span></p><p id=\"u2ea82210\" class=\"ne-p\"><br></p><h2 id=\"4938f95b\"><span class=\"ne-text\">插入图片</span></h2><p id=\"u7e2a5030\" class=\"ne-p\"><br></p><p id=\"uae508e7a\" class=\"ne-p\"><span class=\"ne-text\">插入图片的原理与插入链接一样。</span></p><p id=\"ucd1738cf\" class=\"ne-p\"><br></p><p id=\"u6d9bcb77\" class=\"ne-p\"><span class=\"ne-text\">直接上代码：</span></p><p id=\"uf0e05bce\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"9d61e8d6\" class=\"ne-codeblock language-javascript\">switch (command) {\n\n case 'fontColor':\n\n showColorPicker(btn, 'foreColor');\n\n break;\n\n case 'backColor':\n\n showColorPicker(btn, 'backColor');\n\n break;\n\n case 'createLink':\n\n showLinkDialog(btn);\n\n break;\n\n case 'insertImage':\n\n showImageDialog(btn);\n\n break;\n\n default:\n\n document.execCommand(command, 'true', '');\n\n }\n\n\nfunction showImageDialog(btn) {\n\n const tpl = getImageDialogTpl();\n\n const $dialog = document.getElementById('editorDialog');\n\n $dialog.innerHTML = tpl;\n\n $dialog.style.top = (btn.offsetTop + btn.offsetHeight + 15) + 'px';\n\n $dialog.style.left = btn.offsetLeft + 'px';\n\n $dialog.style.display = 'block';\n\n const imageDialog = document.getElementById('imageDialog');\n\n imageDialog.focus();\n\n const createIamgeBtn = document.getElementById('createIamgeBtn');\n\n createIamgeBtn.addEventListener('click', createImage, false);\n\n}\n\n  \n\nfunction getImageDialogTpl() {\n\n const tpl = `\n\n &lt;input type=&quot;text&quot; id=&quot;imageDialog&quot; /&gt;\n\n &lt;button id=&quot;createIamgeBtn&quot;&gt;确定&lt;/button&gt;\n\n `;\n\n return tpl;\n\n}\n\n  \n\nfunction createImage() {\n\n const imageDialog = document.getElementById('imageDialog');\n\n document.execCommand('insertImage', 'false', imageDialog.value);\n\n const createLinkBtn = document.getElementById('createIamgeBtn');\n\n createIamgeBtn.removeEventListener('click', createImage, false);\n\n const $dialog = document.getElementById('editorDialog');\n\n $dialog.innerHTML = '';\n\n $dialog.style.display = 'none';\n\n}</pre><p id=\"ud91bef0d\" class=\"ne-p\"><br></p><p id=\"u74c3711a\" class=\"ne-p\"><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202205120946072.png\" width=\"859\" id=\"m9uwh\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202205120951181.png\" width=\"1063\" id=\"gpP8u\" class=\"ne-image\"></p><p id=\"u394945cb\" class=\"ne-p\"><br></p><p id=\"ubcdae4aa\" class=\"ne-p\"><span class=\"ne-text\">至此，我们已经实现了所有浏览器API提供的编辑功能。</span></p><p id=\"udfc4e316\" class=\"ne-p\"><br></p><p id=\"u2ee9c5a7\" class=\"ne-p\"><span class=\"ne-text\">当然，现在看代码，有很多冗余，不够优雅，而且功能上也还有很多问题，比如：</span></p><p id=\"u18930150\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"ude1ef420\"><span class=\"ne-text\">设置的字体是使用 font属性，而非CSS</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"u2532478a\"><span class=\"ne-text\">设置的字号只接受1-7, 并且是以 size 属性而非 CSS控制，超出大小无法设置。</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u5cbe8b60\"><span class=\"ne-text\">color使用HTML的input时，始终有一个input框在那里，并且如果手动触发click显示调色板，则调色板的位置无法自动跟随</span></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"ue7980b68\"><span class=\"ne-text\">link 只能创建或取消，无法修改，无法指定是以何种方式打开</span></li></ol><ol start=\"5\" class=\"ne-ol\"><li id=\"u1a13933f\"><span class=\"ne-text\">link和image填写框聚焦时编辑器选区会被取消</span></li></ol><p id=\"u334cc875\" class=\"ne-p\"><br></p><p id=\"uf40bb182\" class=\"ne-p\"><span class=\"ne-text\">当然，这只是肉眼可见的一些问题，还有更多问题，我们下一讲统一再将。</span></p><p id=\"ub6adcabf\" class=\"ne-p\"><br></p><p id=\"ua4cfa185\" class=\"ne-p\"><span class=\"ne-text\">本节所有代码可在分支 </span><code class=\"ne-code\"><span class=\"ne-text\">1.0.4</span></code><span class=\"ne-text\"> 上找到。</span></p></div>",
  "slug": 80566682,
  "title": "富文本编辑器开发系列11——原生API编写简单富文本编辑器003"
}