{
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h1 id=\"2819fafd\"><span class=\"ne-text\">原生API编写富文本编辑器004</span></h1><p id=\"ue294c5ec\" class=\"ne-p\"><br></p><h2 id=\"9a722867\"><span class=\"ne-text\">遗留的问题：</span></h2><p id=\"ub0d32d90\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"u700e6d69\"><span class=\"ne-text\">设置的字体是使用 font属性，而非CSS</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"u966ab8e4\"><span class=\"ne-text\">设置的字号只接受1-7, 并且是以 size 属性而非 CSS控制，超出大小无法设置。</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u1009abdd\"><span class=\"ne-text\">color使用HTML的input时，始终有一个input框在那里，并且如果手动触发click显示调色板，则调色板的位置无法自动跟随</span></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"ue21624c8\"><span class=\"ne-text\">link 只能创建或取消，无法修改，无法指定是以何种方式打开</span></li></ol><ol start=\"5\" class=\"ne-ol\"><li id=\"u5332b3df\"><span class=\"ne-text\">link和image填写框聚焦时编辑器选区会被取消</span></li></ol><p id=\"ub9d3a457\" class=\"ne-p\"><br></p><h3 id=\"20503514\"><span class=\"ne-text\">设置字体字号使用的是HTML属性与标签，而非CSS</span></h3><p id=\"ue588edbf\" class=\"ne-p\"><br></p><p id=\"u4ddf05f1\" class=\"ne-p\"><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202205131611343.png\" width=\"1506\" id=\"QQSBQ\" class=\"ne-image\"></p><p id=\"u8f060d30\" class=\"ne-p\"><br></p><p id=\"u6e5b10ef\" class=\"ne-p\"><span class=\"ne-text\">可以看到，在默认情况下，我们对文本的大多数操作都是使用HTML属性或标签的方式完成样式设置的。</span></p><p id=\"u66cab3af\" class=\"ne-p\"><br></p><p id=\"u511090b9\" class=\"ne-p\"><span class=\"ne-text\">如果想让浏览器使用CSS来设置这些样式，那么在编辑器加载前，执行</span><code class=\"ne-code\"><span class=\"ne-text\">styleWithCSS</span></code><span class=\"ne-text\"> 命令，将设置的模式设置为css模式即可：</span></p><p id=\"u2edc7916\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"fe383c65\" class=\"ne-codeblock language-javascript\">window.onload= function() {\n\n document.execCommand('styleWithCSS', false, '');\n\t//...</pre><p id=\"uaf4d20bb\" class=\"ne-p\"><br></p><p id=\"u65f0bca5\" class=\"ne-p\"><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202205131615995.png\" width=\"1433\" id=\"eWFat\" class=\"ne-image\"></p><p id=\"ud53f59dc\" class=\"ne-p\"><br></p><p id=\"u6dcbc138\" class=\"ne-p\"><span class=\"ne-text\">可以看到，这样浏览器就使用css来设置对应样式了，但又有新的问题，即字号不是我们想的按照像素设置的，而是按照浏览器定义的大小描述来设置的。</span></p><p id=\"u5db401fd\" class=\"ne-p\"><br></p><h3 id=\"51f89a3e\"><span class=\"ne-text\">link和image填写框聚焦时编辑器选区会被取消</span></h3><p id=\"u55b6566a\" class=\"ne-p\"><br></p><p id=\"u6adf914d\" class=\"ne-p\"><span class=\"ne-text\">这个问题可以通过两种方式解决：</span></p><p id=\"u0e1dc5f3\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"u4b8f47e3\"><span class=\"ne-text\">我们现在的可编辑区域是一个div，而我们的input框与该div同属一个文档，所以当input获得焦点时，可编辑区域就会失去焦点从而失去选区，所以我们只需要将div换成一个</span><code class=\"ne-code\"><span class=\"ne-text\">frame</span></code><span class=\"ne-text\">，将可编辑区放置到</span><code class=\"ne-code\"><span class=\"ne-text\">iframe</span></code><span class=\"ne-text\">里的文档中，这样就不会抢夺焦点了。</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"u6acdbdd3\"><span class=\"ne-text\">输入框不使用自己写的input，而是使用浏览器的prompt 框，这样也不会与div抢夺焦点。</span></li></ol><p id=\"ub243749e\" class=\"ne-p\"><br></p><p id=\"u96d38ebb\" class=\"ne-p\"><span class=\"ne-text\">我们后面使用第一种方式改造，第二种方式有兴趣的读者朋友可以自行尝试。</span></p><p id=\"ub03d08dc\" class=\"ne-p\"><br></p><pre data-language=\"html\" id=\"91f714bc\" class=\"ne-codeblock language-html\">// index.html\n&lt;iframe id=&quot;editorContent&quot; class=&quot;editor-content&quot; contenteditable=&quot;true&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</pre><p id=\"ud9121161\" class=\"ne-p\"><br></p><pre data-language=\"css\" id=\"eb79ec48\" class=\"ne-codeblock language-css\">//index.css\n.editor-content {\n\n width: 100%;\n\n height: 500px;\n\n overflow: auto;\n\n padding-top: 20px;\n\n}</pre><p id=\"u5c1e0743\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"0874fd26\" class=\"ne-codeblock language-javascript\">// index.js\n\nvar editor;\n\n  \n\nwindow.onload= function() {\n\n editor = document.getElementById(&quot;editorContent&quot;).contentWindow;//获取iframe Window 对象\n\n editor.document.designMode = 'On'; //打开设计模式\n\n editor.document.contentEditable = true;// 设置元素为可编辑\n\n editor.document.execCommand('styleWithCSS', false, '');\n\t\n\n// 后续文件中所有document.execCommand 改为 editor.document.execCommand， 例如：\n\t\n\tconst rs = editor.document.execCommand('fontName', true, target.value);</pre><p id=\"u6fe18ca5\" class=\"ne-p\"><br></p><p id=\"ua7fe280d\" class=\"ne-p\"><img src=\"https://gitee.com/hjb2722404/tuchuang/raw/master/img/202205131644429.png\" width=\"1147\" id=\"UHGOz\" class=\"ne-image\"></p><p id=\"u3987291e\" class=\"ne-p\"><br></p><h3 id=\"92922125\"><span class=\"ne-text\">其它问题</span></h3><p id=\"uc24efa7f\" class=\"ne-p\"><br></p><p id=\"uec8fb209\" class=\"ne-p\"><span class=\"ne-text\">要解决其它问题，则需要引入浏览器的另外两个API：</span><code class=\"ne-code\"><span class=\"ne-text\">range</span></code><span class=\"ne-text\"> 与 </span><code class=\"ne-code\"><span class=\"ne-text\">selection</span></code><span class=\"ne-text\">;</span></p><p id=\"u2e884b27\" class=\"ne-p\"><br></p><p id=\"u06f617c7\" class=\"ne-p\"><span class=\"ne-text\">我们下一节再说。</span></p><p id=\"ud2cef491\" class=\"ne-p\"><br></p><p id=\"ucfe7642d\" class=\"ne-p\"><span class=\"ne-text\">以上代码可在</span><code class=\"ne-code\"><span class=\"ne-text\">1.0.5</span></code><span class=\"ne-text\"> 分支上找到。</span></p><p id=\"uc352c68d\" class=\"ne-p\"><br></p><h2 id=\"7edcbb19\"><span class=\"ne-text\">代码优化</span></h2><p id=\"uf68e7113\" class=\"ne-p\"><br></p><p id=\"u4c770788\" class=\"ne-p\"><span class=\"ne-text\">之前我们为了讲解功能实现的具体逻辑和原理，使用的是过程式编码方式，看着很不优雅，而且有很多冗余，下来我们就一步一步优化一下实现方式。</span></p><p id=\"u0621f439\" class=\"ne-p\"><br></p><h3 id=\"dc7def72\"><span class=\"ne-text\">工具条动态生成</span></h3><p id=\"ue1dec2c3\" class=\"ne-p\"><br></p><p id=\"ub2eefb7d\" class=\"ne-p\"><span class=\"ne-text\">我们现在的工具条所有按钮，都是写死在html中的，每个按钮一个li标签，但是这样，一是按钮越多，代码就越多，二是不方便扩展，每次新增一个功能按钮，都要去改html模板。</span></p><p id=\"uc533ce5f\" class=\"ne-p\"><br></p><p id=\"u4850b6e0\" class=\"ne-p\"><span class=\"ne-text\">我们改为使用js动态生成dom的方式来改写。</span></p><p id=\"uccbc017a\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"2409bf6e\" class=\"ne-codeblock language-javascript\">// index.js\nwindow.onload= function() {\n\n createEditorBar();\n\n// ...\n\t\n\tfunction createEditorBar() {\n\n let $tpl ='&lt;ul&gt;';\n\n const commandsMap = {\n\n 'undo': {\n\n icon: 'chexiao',\n\n title: '撤销',\n\n },\n\n 'redo': {\n\n icon: 'zhongzuo',\n\n title: '重做',\n\n },\n\n 'copy': {\n\n icon: 'fuzhi',\n\n title: '复制',\n\n },\n\n 'cut': {\n\n icon: 'jianqie',\n\n title: '剪切',\n\n },\n\n 'fontName': {\n\n icon: 'ziti',\n\n title: '字体',\n\n },\n\n 'fontSize': {\n\n icon: 'zihao',\n\n title: '字号',\n\n },\n\n 'bold': {\n\n icon: 'zitijiacu',\n\n title: '加粗',\n\n },\n\n 'italic': {\n\n icon: 'zitixieti',\n\n title: '斜体',\n\n },\n\n 'underline': {\n\n icon: 'zitixiahuaxian',\n\n title: '下划线',\n\n },\n\n 'strikeThrough': {\n\n icon: 'zitishanchuxian',\n\n title: '删除线',\n\n },\n\n 'superscript': {\n\n icon: 'zitishangbiao',\n\n title: '上标',\n\n },\n\n 'subscript': {\n\n icon: 'zitixiabiao',\n\n title: '下标',\n\n },\n\n 'fontColor': {\n\n icon: 'qianjingse',\n\n title: '字体颜色',\n\n },\n\n 'backColor': {\n\n icon: 'zitibeijingse',\n\n title: '字体背景色',\n\n },\n\n 'removeFormat': {\n\n icon: 'qingchugeshi',\n\n title: '清除格式',\n\n },\n\n 'insertOrderedList': {\n\n icon: 'youxuliebiao',\n\n title: '有序列表',\n\n },\n\n 'insertUnorderedList': {\n\n icon: 'wuxuliebiao',\n\n title: '无序列表',\n\n },\n\n 'justifyLeft': {\n\n icon: 'juzuoduiqi',\n\n title: '居左对齐',\n\n },\n\n 'justifyRight': {\n\n icon: 'juyouduiqi',\n\n title: '居右对齐',\n\n },\n\n 'justifyCenter': {\n\n icon: 'juzhongduiqi',\n\n title: '居中对齐',\n\n },\n\n 'justifyFull': {\n\n icon: 'liangduanduiqi',\n\n title: '两端对齐',\n\n },\n\n 'createLink': {\n\n icon: 'charulianjie',\n\n title: '插入链接',\n\n },\n\n 'unlink': {\n\n icon: 'quxiaolianjie',\n\n title: '取消链接',\n\n },\n\n 'indent': {\n\n icon: 'shouhangsuojin',\n\n title: '首行缩进',\n\n },\n\n 'insertImage': {\n\n icon: 'tupian',\n\n title: '插入图片',\n\n },\n\n };\n\n for (key in commandsMap) {\n\n $tpl += `&lt;li&gt;&lt;button command=&quot;${key}&quot;&gt;&lt;i class=&quot;iconfont icon-${commandsMap[key].icon}&quot; title=&quot;${commandsMap[key].title}&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/li&gt;`;\n\n }\n\n $tpl += '&lt;/ul&gt;';\n\n const editorBar = document.getElementById('editorBar');\n\n editorBar.innerHTML = $tpl;\n\n}</pre><p id=\"u308dac2f\" class=\"ne-p\"><br></p><pre data-language=\"html\" id=\"c97e7905\" class=\"ne-codeblock language-html\">// index.html\n&lt;div id=&quot;editorBar&quot; class=&quot;editor-toolbar&quot;&gt;&lt;/div&gt;</pre><p id=\"u763c3a0a\" class=\"ne-p\"><br></p><h3 id=\"7204c476\"><span class=\"ne-text\">统一的下拉框生成方法</span></h3><p id=\"u72b2e239\" class=\"ne-p\"><br></p><p id=\"u2bc6da72\" class=\"ne-p\"><span class=\"ne-text\">目前的下拉框，我们都是新生成按钮，然后再在编辑器初始化的时候动态生成将按钮替换掉的，而且每一个下拉框都有一个单独的生成方法，代码冗余比较多，我们统一使用相同方法生成下拉框的dom，并且在生成工具条的时候直接渲染。</span></p><p id=\"u423d5bd1\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"3c663720\" class=\"ne-codeblock language-javascript\">// index.js\n\n const commandsMap = {\n \t//...\n\t 'fontName': {\n\n icon: 'ziti',\n\n title: '字体',\n\n options: [\n\n {\n\n key: '仿宋',\n\n value: &quot;'仿宋'&quot;,\n\n },\n\n {\n\n key: '黑体',\n\n value: &quot;'黑体'&quot;,\n\n },\n\n {\n\n key: '楷体',\n\n value: &quot;'楷体'&quot;,\n\n },\n\n {\n\n key: '宋体',\n\n value: &quot;'宋体'&quot;,\n\n },\n\n {\n\n key: '微软雅黑',\n\n value: &quot;'微软雅黑'&quot;,\n\n },\n\n {\n\n key: '新宋体',\n\n value: &quot;'新宋体'&quot;,\n\n },\n\n {\n\n key: 'Calibri',\n\n value: &quot;'Calibri'&quot;,\n\n },\n\n {\n\n key: 'Consolas',\n\n value: &quot;'Consolas'&quot;,\n\n },\n\n {\n\n key: 'Droid Sans',\n\n value: &quot;'Droid Sans'&quot;,\n\n },\n\n {\n\n key: 'Microsoft YaHei',\n\n value: &quot;'Microsoft YaHei'&quot;,\n\n },\n\n ],\n\n styleName: 'font-family',\n\n },\n\n 'fontSize': {\n\n icon: 'zihao',\n\n title: '字号',\n\n options: [\n\n {\n\n key: '12',\n\n value: '12px',\n\n },\n\n {\n\n key: '13',\n\n value: '13px',\n\n },\n\n {\n\n key: '16',\n\n value: '16px',\n\n },\n\n {\n\n key: '18',\n\n value: '18px',\n\n },\n\n {\n\n key: '24',\n\n value: '24px',\n\n },\n\n {\n\n key: '32',\n\n value: '32px',\n\n },\n\n {\n\n key: '48',\n\n value: '48px',\n\n },\n\n ],\n\n styleName: 'font-size',\n\n },\n }\n \n //...\n for (key in commandsMap) {\n\n if (commandsMap[key].options) {\n\n let id = key + 'Selector';\n\n let customStyleName = commandsMap[key].styleName;\n\n $tpl += getSelectTpl(id, commandsMap[key].options, customStyleName);\n\n } else {\n\n $tpl += `&lt;li&gt;&lt;button command=&quot;${key}&quot;&gt;&lt;i class=&quot;iconfont icon-${commandsMap[key].icon}&quot; title=&quot;${commandsMap[key].title}&quot;&gt;&lt;/i&gt;&lt;/button&gt;&lt;/li&gt;`;\n\n }\n\n }\n\nfunction getSelectTpl(id, options, customStyleName) {\n\n let $tpl= `&lt;li&gt;&lt;select id=&quot;${id}&quot;&gt;`;\n\n for (let i = 0; i &lt; options.length; i++) {\n\n $tpl += `&lt;option value=&quot;${options[i].value}&quot; style=&quot;${customStyleName}: ${options[i].value}&quot;&gt;${options[i].key}&lt;/option&gt;`;\n\n }\n\n $tpl += '&lt;/select&gt;&lt;/li&gt;';\n\n return $tpl;\n\n}\n\n\nconst editorBar = document.getElementById('editorBar');\n\n    editorBar.innerHTML = $tpl;\n\n    addSelectorEventListener('fontName');\n\n    addSelectorEventListener('fontSize');\n\n\nfunction addSelectorEventListener(key) {\n\n    const $el = document.getElementById(key + 'Selector');\n\n    $el.addEventListener('change', function(e) {\n\n        eval('select' + key.substr(0, 1).toUpperCase() + key.substr(1) + '()');\n\n    });\n\n}\n\n  \n\nfunction selectFontName() {\n\n    const target = document.getElementById('fontNameSelector');\n\n    const rs = editor.document.execCommand('fontName', true, target.value);\n\n}\n\n  \n\nfunction selectFontSize() {\n\n    const valueMap = {\n\n        '12px': 1,\n\n        '13px': 2,\n\n        '16px': 3,\n\n        '18px': 4,\n\n        '24px': 5,\n\n        '32px': 6,\n\n        '48px': 7,\n\n    };\n\n    const target = document.getElementById('fontSizeSelector');\n\n    const value = valueMap[target.value];\n\n    const rs = editor.document.execCommand('fontSize', true, value);\n\n}</pre><p id=\"u305a9755\" class=\"ne-p\"><br></p><h3 id=\"163fdcbb\"><span class=\"ne-text\">统一的对话框生成方法</span></h3><p id=\"uf3845732\" class=\"ne-p\"><br></p><p id=\"u1e062d57\" class=\"ne-p\"><span class=\"ne-text\">目前输入超级链接和网络图片地址都使用了一个简单的对话框，这两部分的代码有很多重复和冗余，需要进行优化。</span></p><p id=\"u698a6ca7\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"b04eb466\" class=\"ne-codeblock language-javascript\">var dialogFun;\n\ncase 'createLink':\n\n\tshowDialog(btn, 'link');\n\n\tbreak;\n\ncase 'insertImage':\n\n\tshowDialog(btn, 'image');\n\n\tbreak;\n\n\nfunction showDialog(btn, type) {\n\n    const upperType = firstLetterToUppercase(type);\n\n    const tpl = getDialogTpl(type);\n\n    showDialogTpl(btn, tpl);\n\n    const dialog = document.getElementById(type + 'Dialog');\n\n    dialog.focus();\n\n    const createDialogBtn = document.getElementById('create' + upperType + 'Btn');\n\n    dialogFun = createDialog.bind(this, type);\n\n    createDialogBtn.addEventListener('click', dialogFun, false);\n\n}\n\n  \n\nfunction getDialogTpl(type) {\n\n    const upperType = firstLetterToUppercase(type);\n\n    const tpl = `\n\n        &lt;input type=&quot;text&quot; id=&quot;${type}Dialog&quot; /&gt;\n\n        &lt;button id=&quot;create${upperType}Btn&quot;&gt;确定&lt;/button&gt;\n\n    `;\n\n    return tpl;\n\n}\n\n  \n\nfunction showDialogTpl(btn, tpl) {\n\n    const $dialog = document.getElementById('editorDialog');\n\n    $dialog.innerHTML = tpl;\n\n    $dialog.style.top = (btn.offsetTop + btn.offsetHeight + 15) + 'px';\n\n    $dialog.style.left = btn.offsetLeft + 'px';\n\n    $dialog.style.display = 'block';\n\n}\n\n  \n\nfunction createDialog(type) {\n\n    const upperType = firstLetterToUppercase(type);\n\n    const dialog = document.getElementById(type + 'Dialog');\n\n    editor.document.execCommand('create' + upperType, 'false', dialog.value);\n\n    const createDialogBtn = document.getElementById('create' + upperType + 'Btn');\n\n    createDialogBtn.removeEventListener('click', dialogFun, false);\n\n    hideDialog();\n\n}\n\n  \n\nfunction firstLetterToUppercase(str) {\n\n    return str.substr(0, 1).toUpperCase() + str.substr(1);\n\n}\n\n  \n\nfunction hideDialog() {\n\n    const $dialog = document.getElementById('editorDialog');\n\n    $dialog.innerHTML = '';\n\n    $dialog.style.display = 'none';\n\n}</pre><p id=\"uaf9000ee\" class=\"ne-p\"><br></p><p id=\"u5b335d46\" class=\"ne-p\"><span class=\"ne-text\">至此，我们完成了基础的代码优化，其实就是提取了一些公共方法，通过参数不同来控制不同的输出。</span></p><p id=\"ud94bf224\" class=\"ne-p\"><br></p><p id=\"uebd91469\" class=\"ne-p\"><span class=\"ne-text\">以上代码可以在 </span><code class=\"ne-code\"><span class=\"ne-text\">1.0.6</span></code><span class=\"ne-text\"> 分支上找到</span></p><p id=\"u8319e510\" class=\"ne-p\"><br></p><h2 id=\"5dc99f6e\"><span class=\"ne-text\">问题</span></h2><p id=\"ub881644f\" class=\"ne-p\"><br></p><p id=\"u98dc88ec\" class=\"ne-p\"><span class=\"ne-text\">现在又有新的问题了，现在我们的所有方法都是暴露在全局环境下的，甚至还有一些全局变量，如果我们的应用中只有一个编辑器实例还好，但是如果同一个页面有两个编辑器，就会很麻烦。</span></p><p id=\"ufd44a68e\" class=\"ne-p\"><br></p><p id=\"ud485aa44\" class=\"ne-p\"><span class=\"ne-text\">所以，下一节我们将对代码进行面向对象的改造，让同一个页面可以生成多个不同的编辑器实例，各个实例之间可以互不干扰。</span></p></div>",
  "slug": 80566737,
  "title": "富文本编辑器开发系列12——原生API编写简单富文本编辑器004"
}